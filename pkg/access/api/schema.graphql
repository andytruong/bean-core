# =====================
# Entites
# =====================
enum AccessScope { Anonymous Authenticated }

type Session {
    id:        ID!
    version:   ID!
    user:      User
    space:     Space!
    scopes:    [AccessScope]
    context:   SessionContext
    isActive:  Boolean!
    createdAt: Time!
    updatedAt: Time!
    expiredAt: Time!
    jwt(codeVerifier: String!): JWT!
}

type SessionContext {
    ipAddress: IP
    country: CountryCode
    deviceType: DeviceType
    deviceName: String
}

enum DeviceType {
    Desktop
    Laptop
    SmartPhone
    Tablet
    TV
}


# =====================
# Query
# =====================
extend type Query {
    accessQuery: AccessQuery!
}

type AccessQuery {
    session: AccessSessionQuery!
}

type AccessSessionQuery {
    load(token: ID!): Session
}

# =====================
# Mutation
# =====================
extend type Mutation {
    accessMutation: AccessMutation!
}

type AccessMutation {
    session: AccessSessionMutation!
}

# ---------------------
# Mutation.accessMutation.create()
# ---------------------
type AccessSessionMutation {
    create(input: SessionCreateInput!): SessionOutcome!
    generateOneTimeLoginToken(input: SessionCreateOTLTSessionInput!): SessionOutcome!
    exchangeOneTimeLoginToken(input: SessionExchangeOTLTInput!): SessionOutcome!
}

input SessionCreateInput {
    spaceId: ID!
    email: EmailAddress!
    hashedPassword: String!
    codeChallengeMethod: String!
    codeChallenge: String!
}

input SessionCreateOTLTSessionInput {
    spaceId: String!
    userId: String!
}

input SessionExchangeOTLTInput {
    token: String!
    codeChallengeMethod: String!
    codeChallenge: String!
}

type SessionOutcome {
    errors: [Error!]
    session: Session
    token: String
}

# ---------------------
# Mutation.accessMutation.archive()
# ---------------------
extend type AccessSessionMutation {
    archive: SessionArchiveOutcome! @requireAuth
}

type SessionArchiveOutcome {
    errors: [Error!]
    result: Boolean!
}
