// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gql

import (
	"bean/components/scalar"
	"bean/components/util"
	"bean/pkg/access/model"
	"bean/pkg/access/model/dto"
	model1 "bean/pkg/app/model"
	dto1 "bean/pkg/app/model/dto"
	model5 "bean/pkg/config/model"
	"bean/pkg/infra/api"
	dto2 "bean/pkg/integration/mailer/model/dto"
	model2 "bean/pkg/integration/s3/model"
	dto3 "bean/pkg/integration/s3/model/dto"
	model3 "bean/pkg/space/model"
	dto4 "bean/pkg/space/model/dto"
	model4 "bean/pkg/user/model"
	dto5 "bean/pkg/user/model/dto"
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	AccessMutation() AccessMutationResolver
	AccessQuery() AccessQueryResolver
	AccessSessionMutation() AccessSessionMutationResolver
	AccessSessionQuery() AccessSessionQueryResolver
	Application() ApplicationResolver
	ApplicationMutation() ApplicationMutationResolver
	ApplicationQuery() ApplicationQueryResolver
	MailerAccountMutation() MailerAccountMutationResolver
	MailerQueryAccount() MailerQueryAccountResolver
	MailerTemplateMutation() MailerTemplateMutationResolver
	Membership() MembershipResolver
	MembershipConnection() MembershipConnectionResolver
	Mutation() MutationResolver
	Query() QueryResolver
	S3Mutation() S3MutationResolver
	S3UploadMutation() S3UploadMutationResolver
	Session() SessionResolver
	Space() SpaceResolver
	SpaceMembershipMutation() SpaceMembershipMutationResolver
	SpaceMembershipQuery() SpaceMembershipQueryResolver
	SpaceMutation() SpaceMutationResolver
	SpaceQuery() SpaceQueryResolver
	User() UserResolver
	UserEmail() UserEmailResolver
	UserMutation() UserMutationResolver
	UserQuery() UserQueryResolver
}

type DirectiveRoot struct {
	Comment     func(ctx context.Context, obj interface{}, next graphql.Resolver, value *string, values []string) (res interface{}, err error)
	Constraint  func(ctx context.Context, obj interface{}, next graphql.Resolver, maxLength *int, minLength *int) (res interface{}, err error)
	RequireAuth func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
	Value       func(ctx context.Context, obj interface{}, next graphql.Resolver, string *string, int *int) (res interface{}, err error)
}

type ComplexityRoot struct {
	AccessMutation struct {
		Session func(childComplexity int) int
	}

	AccessQuery struct {
		Session func(childComplexity int) int
	}

	AccessSessionMutation struct {
		Archive func(childComplexity int) int
		Create  func(childComplexity int, input *dto.SessionCreateInput) int
	}

	AccessSessionQuery struct {
		Load func(childComplexity int, token string) int
	}

	Application struct {
		CreatedAt   func(childComplexity int) int
		Credentials func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		ID          func(childComplexity int) int
		IsActive    func(childComplexity int) int
		Polices     func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		Version     func(childComplexity int) int
	}

	ApplicationMutation struct {
		Create func(childComplexity int, input *dto1.ApplicationCreateInput) int
		Update func(childComplexity int, input *dto1.ApplicationUpdateInput) int
	}

	ApplicationOutcome struct {
		App    func(childComplexity int) int
		Errors func(childComplexity int) int
	}

	ApplicationQuery struct {
		Load func(childComplexity int, id string, version *string) int
	}

	ConfigBucket struct {
		Access      func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		HostId      func(childComplexity int) int
		Id          func(childComplexity int) int
		IsPublished func(childComplexity int) int
		Slug        func(childComplexity int) int
		Title       func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		Version     func(childComplexity int) int
	}

	ConfigVariable struct {
		BucketId    func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		Id          func(childComplexity int) int
		IsLocked    func(childComplexity int) int
		Name        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		Value       func(childComplexity int) int
		Version     func(childComplexity int) int
	}

	Credentials struct {
		AccessKey func(childComplexity int) int
		Bucket    func(childComplexity int) int
		Endpoint  func(childComplexity int) int
		ID        func(childComplexity int) int
		IsSecure  func(childComplexity int) int
	}

	DomainName struct {
		CreatedAt  func(childComplexity int) int
		ID         func(childComplexity int) int
		IsActive   func(childComplexity int) int
		IsVerified func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
		Value      func(childComplexity int) int
	}

	DomainNames struct {
		Primary   func(childComplexity int) int
		Secondary func(childComplexity int) int
	}

	Error struct {
		Code    func(childComplexity int) int
		Fields  func(childComplexity int) int
		Message func(childComplexity int) int
	}

	MailerAccount struct {
		Attachment    func(childComplexity int) int
		ConnectionURL func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		DeletedAt     func(childComplexity int) int
		ID            func(childComplexity int) int
		Sender        func(childComplexity int) int
		Space         func(childComplexity int) int
		Status        func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		Version       func(childComplexity int) int
	}

	MailerAccountAttachment struct {
		FileTypes     func(childComplexity int) int
		SizeLimit     func(childComplexity int) int
		SizeLimitEach func(childComplexity int) int
	}

	MailerAccountConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	MailerAccountEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	MailerAccountMutation struct {
		Create func(childComplexity int, input dto2.MailerAccountCreateInput) int
		Update func(childComplexity int, input dto2.MailerAccountUpdateInput) int
		Verify func(childComplexity int, id string, version string) int
	}

	MailerAccountMutationOutcome struct {
		Account func(childComplexity int) int
		Errors  func(childComplexity int) int
	}

	MailerAccountPageInfo struct {
		EndCursor   func(childComplexity int) int
		HasNextPage func(childComplexity int) int
		StartCursor func(childComplexity int) int
	}

	MailerAuditLog struct {
		Account         func(childComplexity int) int
		ContextHash     func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		ErrorCode       func(childComplexity int) int
		ErrorMessage    func(childComplexity int) int
		ID              func(childComplexity int) int
		RecipientHash   func(childComplexity int) int
		SpanID          func(childComplexity int) int
		Template        func(childComplexity int) int
		WarningMessagse func(childComplexity int) int
	}

	MailerMutation struct {
		Account  func(childComplexity int) int
		Template func(childComplexity int) int
	}

	MailerQuery struct {
		Account func(childComplexity int) int
	}

	MailerQueryAccount struct {
		Get         func(childComplexity int, id string) int
		GetMultiple func(childComplexity int, first int, after *string) int
	}

	MailerSender struct {
		Email func(childComplexity int) int
		Name  func(childComplexity int) int
	}

	MailerTemplate struct {
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		IsActive  func(childComplexity int) int
		Message   func(childComplexity int) int
		Space     func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		Version   func(childComplexity int) int
	}

	MailerTemplateEvent struct {
		ID       func(childComplexity int) int
		Key      func(childComplexity int) int
		Payload  func(childComplexity int) int
		Template func(childComplexity int) int
		User     func(childComplexity int) int
	}

	MailerTemplateMessage struct {
		BodyHTML func(childComplexity int) int
		BodyText func(childComplexity int) int
		Language func(childComplexity int) int
		Title    func(childComplexity int) int
	}

	MailerTemplateMutation struct {
		Create func(childComplexity int) int
		Delete func(childComplexity int) int
		Update func(childComplexity int) int
	}

	Membership struct {
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		IsActive  func(childComplexity int) int
		Roles     func(childComplexity int) int
		Space     func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		User      func(childComplexity int) int
		Version   func(childComplexity int) int
	}

	MembershipConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	MembershipEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	MembershipInfo struct {
		EndCursor   func(childComplexity int) int
		HasNextPage func(childComplexity int) int
		StartCursor func(childComplexity int) int
	}

	Mutation struct {
		AccessMutation      func(childComplexity int) int
		ApplicationMutation func(childComplexity int) int
		MailerMutation      func(childComplexity int) int
		S3Mutation          func(childComplexity int) int
		SpaceMutation       func(childComplexity int) int
		UserMutation        func(childComplexity int) int
	}

	Policy struct {
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Kind      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		Value     func(childComplexity int) int
	}

	Query struct {
		AccessQuery      func(childComplexity int) int
		ApplicationQuery func(childComplexity int) int
		MailerQuery      func(childComplexity int) int
		SpaceQuery       func(childComplexity int) int
		UserQuery        func(childComplexity int) int
	}

	S3Mutation struct {
		Upload func(childComplexity int) int
	}

	S3UploadMutation struct {
		Token func(childComplexity int, input dto3.S3UploadTokenInput) int
	}

	Session struct {
		Context   func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		ExpiredAt func(childComplexity int) int
		ID        func(childComplexity int) int
		IsActive  func(childComplexity int) int
		Jwt       func(childComplexity int, codeVerifier string) int
		Scopes    func(childComplexity int) int
		Space     func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		User      func(childComplexity int) int
		Version   func(childComplexity int) int
	}

	SessionArchiveOutcome struct {
		Errors func(childComplexity int) int
		Result func(childComplexity int) int
	}

	SessionContext struct {
		Country    func(childComplexity int) int
		DeviceName func(childComplexity int) int
		DeviceType func(childComplexity int) int
		IPAddress  func(childComplexity int) int
	}

	SessionCreateOutcome struct {
		Errors  func(childComplexity int) int
		Session func(childComplexity int) int
		Token   func(childComplexity int) int
	}

	Space struct {
		CreatedAt   func(childComplexity int) int
		DomainNames func(childComplexity int) int
		Features    func(childComplexity int) int
		ID          func(childComplexity int) int
		IsActive    func(childComplexity int) int
		Kind        func(childComplexity int) int
		Language    func(childComplexity int) int
		Parent      func(childComplexity int) int
		Title       func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		Version     func(childComplexity int) int
	}

	SpaceCreateOutcome struct {
		Errors func(childComplexity int) int
		Space  func(childComplexity int) int
	}

	SpaceFeatures struct {
		Register func(childComplexity int) int
	}

	SpaceMembershipCreateOutcome struct {
		Errors     func(childComplexity int) int
		Membership func(childComplexity int) int
	}

	SpaceMembershipMutation struct {
		Create func(childComplexity int, input dto4.SpaceMembershipCreateInput) int
		Update func(childComplexity int, input dto4.SpaceMembershipUpdateInput) int
	}

	SpaceMembershipQuery struct {
		Find func(childComplexity int, first int, after *string, filters dto4.MembershipsFilter) int
		Load func(childComplexity int, id string, version *string) int
	}

	SpaceMutation struct {
		Create     func(childComplexity int, input dto4.SpaceCreateInput) int
		Membership func(childComplexity int) int
		Update     func(childComplexity int, input dto4.SpaceUpdateInput) int
	}

	SpaceQuery struct {
		FindOne    func(childComplexity int, filters dto4.SpaceFilters) int
		Membership func(childComplexity int) int
	}

	User struct {
		AvatarURI func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		Emails    func(childComplexity int) int
		ID        func(childComplexity int) int
		IsActive  func(childComplexity int) int
		Language  func(childComplexity int) int
		Name      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		Version   func(childComplexity int) int
	}

	UserEmail struct {
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		IsActive  func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		Value     func(childComplexity int) int
		Verified  func(childComplexity int) int
	}

	UserEmails struct {
		Primary   func(childComplexity int) int
		Secondary func(childComplexity int) int
	}

	UserMutation struct {
		Create func(childComplexity int, input *dto5.UserCreateInput) int
		Update func(childComplexity int, input dto5.UserUpdateInput) int
	}

	UserMutationOutcome struct {
		Errors func(childComplexity int) int
		User   func(childComplexity int) int
	}

	UserName struct {
		FirstName     func(childComplexity int) int
		LastName      func(childComplexity int) int
		PreferredName func(childComplexity int) int
	}

	UserQuery struct {
		Load func(childComplexity int, id string) int
	}
}

type AccessMutationResolver interface {
	Session(ctx context.Context, obj *dto.AccessMutation) (*dto.AccessSessionMutation, error)
}
type AccessQueryResolver interface {
	Session(ctx context.Context, obj *dto.AccessQuery) (*dto.AccessSessionQuery, error)
}
type AccessSessionMutationResolver interface {
	Create(ctx context.Context, obj *dto.AccessSessionMutation, input *dto.SessionCreateInput) (*dto.SessionCreateOutcome, error)
	Archive(ctx context.Context, obj *dto.AccessSessionMutation) (*dto.SessionArchiveOutcome, error)
}
type AccessSessionQueryResolver interface {
	Load(ctx context.Context, obj *dto.AccessSessionQuery, token string) (*model.Session, error)
}
type ApplicationResolver interface {
	Polices(ctx context.Context, obj *model1.Application) ([]*model2.Policy, error)
	Credentials(ctx context.Context, obj *model1.Application) (*model2.Credentials, error)
}
type ApplicationMutationResolver interface {
	Create(ctx context.Context, obj *dto1.ApplicationMutation, input *dto1.ApplicationCreateInput) (*dto1.ApplicationOutcome, error)
	Update(ctx context.Context, obj *dto1.ApplicationMutation, input *dto1.ApplicationUpdateInput) (*dto1.ApplicationOutcome, error)
}
type ApplicationQueryResolver interface {
	Load(ctx context.Context, obj *dto1.ApplicationQuery, id string, version *string) (*model1.Application, error)
}
type MailerAccountMutationResolver interface {
	Create(ctx context.Context, obj *dto2.MailerAccountMutation, input dto2.MailerAccountCreateInput) (*dto2.MailerAccountMutationOutcome, error)
	Update(ctx context.Context, obj *dto2.MailerAccountMutation, input dto2.MailerAccountUpdateInput) (*dto2.MailerAccountMutationOutcome, error)
	Verify(ctx context.Context, obj *dto2.MailerAccountMutation, id string, version string) (*dto2.MailerAccountMutationOutcome, error)
}
type MailerQueryAccountResolver interface {
	Get(ctx context.Context, obj *dto2.MailerQueryAccount, id string) (*dto2.MailerAccount, error)
	GetMultiple(ctx context.Context, obj *dto2.MailerQueryAccount, first int, after *string) ([]*dto2.MailerAccount, error)
}
type MailerTemplateMutationResolver interface {
	Create(ctx context.Context, obj *dto2.MailerTemplateMutation) (*bool, error)
	Update(ctx context.Context, obj *dto2.MailerTemplateMutation) (*bool, error)
	Delete(ctx context.Context, obj *dto2.MailerTemplateMutation) (*bool, error)
}
type MembershipResolver interface {
	Space(ctx context.Context, obj *model3.Membership) (*model3.Space, error)
	User(ctx context.Context, obj *model3.Membership) (*model4.User, error)

	Roles(ctx context.Context, obj *model3.Membership) ([]*model3.Space, error)
}
type MembershipConnectionResolver interface {
	Edges(ctx context.Context, obj *model3.MembershipConnection) ([]*model3.MembershipEdge, error)
}
type MutationResolver interface {
	AccessMutation(ctx context.Context) (*dto.AccessMutation, error)
	ApplicationMutation(ctx context.Context) (*dto1.ApplicationMutation, error)
	MailerMutation(ctx context.Context) (*dto2.MailerMutation, error)
	S3Mutation(ctx context.Context) (*dto3.S3Mutation, error)
	SpaceMutation(ctx context.Context) (*dto4.SpaceMutation, error)
	UserMutation(ctx context.Context) (*dto5.UserMutation, error)
}
type QueryResolver interface {
	AccessQuery(ctx context.Context) (*dto.AccessQuery, error)
	ApplicationQuery(ctx context.Context) (*dto1.ApplicationQuery, error)
	MailerQuery(ctx context.Context) (*dto2.MailerQuery, error)
	SpaceQuery(ctx context.Context) (*dto4.SpaceQuery, error)
	UserQuery(ctx context.Context) (*dto5.UserQuery, error)
}
type S3MutationResolver interface {
	Upload(ctx context.Context, obj *dto3.S3Mutation) (*dto3.S3UploadMutation, error)
}
type S3UploadMutationResolver interface {
	Token(ctx context.Context, obj *dto3.S3UploadMutation, input dto3.S3UploadTokenInput) (map[string]interface{}, error)
}
type SessionResolver interface {
	User(ctx context.Context, obj *model.Session) (*model4.User, error)
	Space(ctx context.Context, obj *model.Session) (*model3.Space, error)
	Scopes(ctx context.Context, obj *model.Session) ([]*model.AccessScope, error)
	Context(ctx context.Context, obj *model.Session) (*model.SessionContext, error)

	Jwt(ctx context.Context, obj *model.Session, codeVerifier string) (string, error)
}
type SpaceResolver interface {
	DomainNames(ctx context.Context, obj *model3.Space) (*model3.DomainNames, error)
	Features(ctx context.Context, obj *model3.Space) (*model3.SpaceFeatures, error)

	Parent(ctx context.Context, obj *model3.Space) (*model3.Space, error)
}
type SpaceMembershipMutationResolver interface {
	Create(ctx context.Context, obj *dto4.SpaceMembershipMutation, input dto4.SpaceMembershipCreateInput) (*dto4.SpaceMembershipCreateOutcome, error)
	Update(ctx context.Context, obj *dto4.SpaceMembershipMutation, input dto4.SpaceMembershipUpdateInput) (*dto4.SpaceMembershipCreateOutcome, error)
}
type SpaceMembershipQueryResolver interface {
	Load(ctx context.Context, obj *dto4.SpaceMembershipQuery, id string, version *string) (*model3.Membership, error)
	Find(ctx context.Context, obj *dto4.SpaceMembershipQuery, first int, after *string, filters dto4.MembershipsFilter) (*model3.MembershipConnection, error)
}
type SpaceMutationResolver interface {
	Create(ctx context.Context, obj *dto4.SpaceMutation, input dto4.SpaceCreateInput) (*dto4.SpaceCreateOutcome, error)
	Update(ctx context.Context, obj *dto4.SpaceMutation, input dto4.SpaceUpdateInput) (*dto4.SpaceCreateOutcome, error)
	Membership(ctx context.Context, obj *dto4.SpaceMutation) (*dto4.SpaceMembershipMutation, error)
}
type SpaceQueryResolver interface {
	FindOne(ctx context.Context, obj *dto4.SpaceQuery, filters dto4.SpaceFilters) (*model3.Space, error)
	Membership(ctx context.Context, obj *dto4.SpaceQuery) (*dto4.SpaceMembershipQuery, error)
}
type UserResolver interface {
	Name(ctx context.Context, obj *model4.User) (*model4.UserName, error)
	Emails(ctx context.Context, obj *model4.User) (*model4.UserEmails, error)
}
type UserEmailResolver interface {
	Verified(ctx context.Context, obj *model4.UserEmail) (bool, error)
}
type UserMutationResolver interface {
	Create(ctx context.Context, obj *dto5.UserMutation, input *dto5.UserCreateInput) (*dto5.UserMutationOutcome, error)
	Update(ctx context.Context, obj *dto5.UserMutation, input dto5.UserUpdateInput) (*dto5.UserMutationOutcome, error)
}
type UserQueryResolver interface {
	Load(ctx context.Context, obj *dto5.UserQuery, id string) (*model4.User, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "AccessMutation.session":
		if e.complexity.AccessMutation.Session == nil {
			break
		}

		return e.complexity.AccessMutation.Session(childComplexity), true

	case "AccessQuery.session":
		if e.complexity.AccessQuery.Session == nil {
			break
		}

		return e.complexity.AccessQuery.Session(childComplexity), true

	case "AccessSessionMutation.archive":
		if e.complexity.AccessSessionMutation.Archive == nil {
			break
		}

		return e.complexity.AccessSessionMutation.Archive(childComplexity), true

	case "AccessSessionMutation.create":
		if e.complexity.AccessSessionMutation.Create == nil {
			break
		}

		args, err := ec.field_AccessSessionMutation_create_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.AccessSessionMutation.Create(childComplexity, args["input"].(*dto.SessionCreateInput)), true

	case "AccessSessionQuery.load":
		if e.complexity.AccessSessionQuery.Load == nil {
			break
		}

		args, err := ec.field_AccessSessionQuery_load_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.AccessSessionQuery.Load(childComplexity, args["token"].(string)), true

	case "Application.createdAt":
		if e.complexity.Application.CreatedAt == nil {
			break
		}

		return e.complexity.Application.CreatedAt(childComplexity), true

	case "Application.credentials":
		if e.complexity.Application.Credentials == nil {
			break
		}

		return e.complexity.Application.Credentials(childComplexity), true

	case "Application.deletedAt":
		if e.complexity.Application.DeletedAt == nil {
			break
		}

		return e.complexity.Application.DeletedAt(childComplexity), true

	case "Application.id":
		if e.complexity.Application.ID == nil {
			break
		}

		return e.complexity.Application.ID(childComplexity), true

	case "Application.isActive":
		if e.complexity.Application.IsActive == nil {
			break
		}

		return e.complexity.Application.IsActive(childComplexity), true

	case "Application.polices":
		if e.complexity.Application.Polices == nil {
			break
		}

		return e.complexity.Application.Polices(childComplexity), true

	case "Application.updatedAt":
		if e.complexity.Application.UpdatedAt == nil {
			break
		}

		return e.complexity.Application.UpdatedAt(childComplexity), true

	case "Application.version":
		if e.complexity.Application.Version == nil {
			break
		}

		return e.complexity.Application.Version(childComplexity), true

	case "ApplicationMutation.create":
		if e.complexity.ApplicationMutation.Create == nil {
			break
		}

		args, err := ec.field_ApplicationMutation_create_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ApplicationMutation.Create(childComplexity, args["input"].(*dto1.ApplicationCreateInput)), true

	case "ApplicationMutation.update":
		if e.complexity.ApplicationMutation.Update == nil {
			break
		}

		args, err := ec.field_ApplicationMutation_update_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ApplicationMutation.Update(childComplexity, args["input"].(*dto1.ApplicationUpdateInput)), true

	case "ApplicationOutcome.app":
		if e.complexity.ApplicationOutcome.App == nil {
			break
		}

		return e.complexity.ApplicationOutcome.App(childComplexity), true

	case "ApplicationOutcome.errors":
		if e.complexity.ApplicationOutcome.Errors == nil {
			break
		}

		return e.complexity.ApplicationOutcome.Errors(childComplexity), true

	case "ApplicationQuery.load":
		if e.complexity.ApplicationQuery.Load == nil {
			break
		}

		args, err := ec.field_ApplicationQuery_load_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ApplicationQuery.Load(childComplexity, args["id"].(string), args["version"].(*string)), true

	case "ConfigBucket.access":
		if e.complexity.ConfigBucket.Access == nil {
			break
		}

		return e.complexity.ConfigBucket.Access(childComplexity), true

	case "ConfigBucket.createdAt":
		if e.complexity.ConfigBucket.CreatedAt == nil {
			break
		}

		return e.complexity.ConfigBucket.CreatedAt(childComplexity), true

	case "ConfigBucket.description":
		if e.complexity.ConfigBucket.Description == nil {
			break
		}

		return e.complexity.ConfigBucket.Description(childComplexity), true

	case "ConfigBucket.hostId":
		if e.complexity.ConfigBucket.HostId == nil {
			break
		}

		return e.complexity.ConfigBucket.HostId(childComplexity), true

	case "ConfigBucket.id":
		if e.complexity.ConfigBucket.Id == nil {
			break
		}

		return e.complexity.ConfigBucket.Id(childComplexity), true

	case "ConfigBucket.isPublished":
		if e.complexity.ConfigBucket.IsPublished == nil {
			break
		}

		return e.complexity.ConfigBucket.IsPublished(childComplexity), true

	case "ConfigBucket.slug":
		if e.complexity.ConfigBucket.Slug == nil {
			break
		}

		return e.complexity.ConfigBucket.Slug(childComplexity), true

	case "ConfigBucket.title":
		if e.complexity.ConfigBucket.Title == nil {
			break
		}

		return e.complexity.ConfigBucket.Title(childComplexity), true

	case "ConfigBucket.updatedAt":
		if e.complexity.ConfigBucket.UpdatedAt == nil {
			break
		}

		return e.complexity.ConfigBucket.UpdatedAt(childComplexity), true

	case "ConfigBucket.version":
		if e.complexity.ConfigBucket.Version == nil {
			break
		}

		return e.complexity.ConfigBucket.Version(childComplexity), true

	case "ConfigVariable.bucketId":
		if e.complexity.ConfigVariable.BucketId == nil {
			break
		}

		return e.complexity.ConfigVariable.BucketId(childComplexity), true

	case "ConfigVariable.createdAt":
		if e.complexity.ConfigVariable.CreatedAt == nil {
			break
		}

		return e.complexity.ConfigVariable.CreatedAt(childComplexity), true

	case "ConfigVariable.description":
		if e.complexity.ConfigVariable.Description == nil {
			break
		}

		return e.complexity.ConfigVariable.Description(childComplexity), true

	case "ConfigVariable.id":
		if e.complexity.ConfigVariable.Id == nil {
			break
		}

		return e.complexity.ConfigVariable.Id(childComplexity), true

	case "ConfigVariable.isLocked":
		if e.complexity.ConfigVariable.IsLocked == nil {
			break
		}

		return e.complexity.ConfigVariable.IsLocked(childComplexity), true

	case "ConfigVariable.name":
		if e.complexity.ConfigVariable.Name == nil {
			break
		}

		return e.complexity.ConfigVariable.Name(childComplexity), true

	case "ConfigVariable.updatedAt":
		if e.complexity.ConfigVariable.UpdatedAt == nil {
			break
		}

		return e.complexity.ConfigVariable.UpdatedAt(childComplexity), true

	case "ConfigVariable.value":
		if e.complexity.ConfigVariable.Value == nil {
			break
		}

		return e.complexity.ConfigVariable.Value(childComplexity), true

	case "ConfigVariable.version":
		if e.complexity.ConfigVariable.Version == nil {
			break
		}

		return e.complexity.ConfigVariable.Version(childComplexity), true

	case "Credentials.accesskey":
		if e.complexity.Credentials.AccessKey == nil {
			break
		}

		return e.complexity.Credentials.AccessKey(childComplexity), true

	case "Credentials.bucket":
		if e.complexity.Credentials.Bucket == nil {
			break
		}

		return e.complexity.Credentials.Bucket(childComplexity), true

	case "Credentials.endpoint":
		if e.complexity.Credentials.Endpoint == nil {
			break
		}

		return e.complexity.Credentials.Endpoint(childComplexity), true

	case "Credentials.id":
		if e.complexity.Credentials.ID == nil {
			break
		}

		return e.complexity.Credentials.ID(childComplexity), true

	case "Credentials.isSecure":
		if e.complexity.Credentials.IsSecure == nil {
			break
		}

		return e.complexity.Credentials.IsSecure(childComplexity), true

	case "DomainName.createdAt":
		if e.complexity.DomainName.CreatedAt == nil {
			break
		}

		return e.complexity.DomainName.CreatedAt(childComplexity), true

	case "DomainName.id":
		if e.complexity.DomainName.ID == nil {
			break
		}

		return e.complexity.DomainName.ID(childComplexity), true

	case "DomainName.isActive":
		if e.complexity.DomainName.IsActive == nil {
			break
		}

		return e.complexity.DomainName.IsActive(childComplexity), true

	case "DomainName.isVerified":
		if e.complexity.DomainName.IsVerified == nil {
			break
		}

		return e.complexity.DomainName.IsVerified(childComplexity), true

	case "DomainName.updatedAt":
		if e.complexity.DomainName.UpdatedAt == nil {
			break
		}

		return e.complexity.DomainName.UpdatedAt(childComplexity), true

	case "DomainName.value":
		if e.complexity.DomainName.Value == nil {
			break
		}

		return e.complexity.DomainName.Value(childComplexity), true

	case "DomainNames.primary":
		if e.complexity.DomainNames.Primary == nil {
			break
		}

		return e.complexity.DomainNames.Primary(childComplexity), true

	case "DomainNames.secondary":
		if e.complexity.DomainNames.Secondary == nil {
			break
		}

		return e.complexity.DomainNames.Secondary(childComplexity), true

	case "Error.code":
		if e.complexity.Error.Code == nil {
			break
		}

		return e.complexity.Error.Code(childComplexity), true

	case "Error.fields":
		if e.complexity.Error.Fields == nil {
			break
		}

		return e.complexity.Error.Fields(childComplexity), true

	case "Error.message":
		if e.complexity.Error.Message == nil {
			break
		}

		return e.complexity.Error.Message(childComplexity), true

	case "MailerAccount.attachment":
		if e.complexity.MailerAccount.Attachment == nil {
			break
		}

		return e.complexity.MailerAccount.Attachment(childComplexity), true

	case "MailerAccount.connectionUrl":
		if e.complexity.MailerAccount.ConnectionURL == nil {
			break
		}

		return e.complexity.MailerAccount.ConnectionURL(childComplexity), true

	case "MailerAccount.createdAt":
		if e.complexity.MailerAccount.CreatedAt == nil {
			break
		}

		return e.complexity.MailerAccount.CreatedAt(childComplexity), true

	case "MailerAccount.deletedAt":
		if e.complexity.MailerAccount.DeletedAt == nil {
			break
		}

		return e.complexity.MailerAccount.DeletedAt(childComplexity), true

	case "MailerAccount.id":
		if e.complexity.MailerAccount.ID == nil {
			break
		}

		return e.complexity.MailerAccount.ID(childComplexity), true

	case "MailerAccount.sender":
		if e.complexity.MailerAccount.Sender == nil {
			break
		}

		return e.complexity.MailerAccount.Sender(childComplexity), true

	case "MailerAccount.space":
		if e.complexity.MailerAccount.Space == nil {
			break
		}

		return e.complexity.MailerAccount.Space(childComplexity), true

	case "MailerAccount.status":
		if e.complexity.MailerAccount.Status == nil {
			break
		}

		return e.complexity.MailerAccount.Status(childComplexity), true

	case "MailerAccount.updatedAt":
		if e.complexity.MailerAccount.UpdatedAt == nil {
			break
		}

		return e.complexity.MailerAccount.UpdatedAt(childComplexity), true

	case "MailerAccount.version":
		if e.complexity.MailerAccount.Version == nil {
			break
		}

		return e.complexity.MailerAccount.Version(childComplexity), true

	case "MailerAccountAttachment.fileTypes":
		if e.complexity.MailerAccountAttachment.FileTypes == nil {
			break
		}

		return e.complexity.MailerAccountAttachment.FileTypes(childComplexity), true

	case "MailerAccountAttachment.sizeLimit":
		if e.complexity.MailerAccountAttachment.SizeLimit == nil {
			break
		}

		return e.complexity.MailerAccountAttachment.SizeLimit(childComplexity), true

	case "MailerAccountAttachment.sizeLimitEach":
		if e.complexity.MailerAccountAttachment.SizeLimitEach == nil {
			break
		}

		return e.complexity.MailerAccountAttachment.SizeLimitEach(childComplexity), true

	case "MailerAccountConnection.edges":
		if e.complexity.MailerAccountConnection.Edges == nil {
			break
		}

		return e.complexity.MailerAccountConnection.Edges(childComplexity), true

	case "MailerAccountConnection.pageInfo":
		if e.complexity.MailerAccountConnection.PageInfo == nil {
			break
		}

		return e.complexity.MailerAccountConnection.PageInfo(childComplexity), true

	case "MailerAccountEdge.cursor":
		if e.complexity.MailerAccountEdge.Cursor == nil {
			break
		}

		return e.complexity.MailerAccountEdge.Cursor(childComplexity), true

	case "MailerAccountEdge.node":
		if e.complexity.MailerAccountEdge.Node == nil {
			break
		}

		return e.complexity.MailerAccountEdge.Node(childComplexity), true

	case "MailerAccountMutation.create":
		if e.complexity.MailerAccountMutation.Create == nil {
			break
		}

		args, err := ec.field_MailerAccountMutation_create_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MailerAccountMutation.Create(childComplexity, args["input"].(dto2.MailerAccountCreateInput)), true

	case "MailerAccountMutation.update":
		if e.complexity.MailerAccountMutation.Update == nil {
			break
		}

		args, err := ec.field_MailerAccountMutation_update_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MailerAccountMutation.Update(childComplexity, args["input"].(dto2.MailerAccountUpdateInput)), true

	case "MailerAccountMutation.verify":
		if e.complexity.MailerAccountMutation.Verify == nil {
			break
		}

		args, err := ec.field_MailerAccountMutation_verify_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MailerAccountMutation.Verify(childComplexity, args["id"].(string), args["version"].(string)), true

	case "MailerAccountMutationOutcome.account":
		if e.complexity.MailerAccountMutationOutcome.Account == nil {
			break
		}

		return e.complexity.MailerAccountMutationOutcome.Account(childComplexity), true

	case "MailerAccountMutationOutcome.errors":
		if e.complexity.MailerAccountMutationOutcome.Errors == nil {
			break
		}

		return e.complexity.MailerAccountMutationOutcome.Errors(childComplexity), true

	case "MailerAccountPageInfo.endCursor":
		if e.complexity.MailerAccountPageInfo.EndCursor == nil {
			break
		}

		return e.complexity.MailerAccountPageInfo.EndCursor(childComplexity), true

	case "MailerAccountPageInfo.hasNextPage":
		if e.complexity.MailerAccountPageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.MailerAccountPageInfo.HasNextPage(childComplexity), true

	case "MailerAccountPageInfo.startCursor":
		if e.complexity.MailerAccountPageInfo.StartCursor == nil {
			break
		}

		return e.complexity.MailerAccountPageInfo.StartCursor(childComplexity), true

	case "MailerAuditLog.account":
		if e.complexity.MailerAuditLog.Account == nil {
			break
		}

		return e.complexity.MailerAuditLog.Account(childComplexity), true

	case "MailerAuditLog.contextHash":
		if e.complexity.MailerAuditLog.ContextHash == nil {
			break
		}

		return e.complexity.MailerAuditLog.ContextHash(childComplexity), true

	case "MailerAuditLog.createdAt":
		if e.complexity.MailerAuditLog.CreatedAt == nil {
			break
		}

		return e.complexity.MailerAuditLog.CreatedAt(childComplexity), true

	case "MailerAuditLog.errorCode":
		if e.complexity.MailerAuditLog.ErrorCode == nil {
			break
		}

		return e.complexity.MailerAuditLog.ErrorCode(childComplexity), true

	case "MailerAuditLog.errorMessage":
		if e.complexity.MailerAuditLog.ErrorMessage == nil {
			break
		}

		return e.complexity.MailerAuditLog.ErrorMessage(childComplexity), true

	case "MailerAuditLog.id":
		if e.complexity.MailerAuditLog.ID == nil {
			break
		}

		return e.complexity.MailerAuditLog.ID(childComplexity), true

	case "MailerAuditLog.recipientHash":
		if e.complexity.MailerAuditLog.RecipientHash == nil {
			break
		}

		return e.complexity.MailerAuditLog.RecipientHash(childComplexity), true

	case "MailerAuditLog.spanId":
		if e.complexity.MailerAuditLog.SpanID == nil {
			break
		}

		return e.complexity.MailerAuditLog.SpanID(childComplexity), true

	case "MailerAuditLog.template":
		if e.complexity.MailerAuditLog.Template == nil {
			break
		}

		return e.complexity.MailerAuditLog.Template(childComplexity), true

	case "MailerAuditLog.warningMessagse":
		if e.complexity.MailerAuditLog.WarningMessagse == nil {
			break
		}

		return e.complexity.MailerAuditLog.WarningMessagse(childComplexity), true

	case "MailerMutation.account":
		if e.complexity.MailerMutation.Account == nil {
			break
		}

		return e.complexity.MailerMutation.Account(childComplexity), true

	case "MailerMutation.template":
		if e.complexity.MailerMutation.Template == nil {
			break
		}

		return e.complexity.MailerMutation.Template(childComplexity), true

	case "MailerQuery.account":
		if e.complexity.MailerQuery.Account == nil {
			break
		}

		return e.complexity.MailerQuery.Account(childComplexity), true

	case "MailerQueryAccount.get":
		if e.complexity.MailerQueryAccount.Get == nil {
			break
		}

		args, err := ec.field_MailerQueryAccount_get_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MailerQueryAccount.Get(childComplexity, args["id"].(string)), true

	case "MailerQueryAccount.getMultiple":
		if e.complexity.MailerQueryAccount.GetMultiple == nil {
			break
		}

		args, err := ec.field_MailerQueryAccount_getMultiple_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MailerQueryAccount.GetMultiple(childComplexity, args["first"].(int), args["after"].(*string)), true

	case "MailerSender.email":
		if e.complexity.MailerSender.Email == nil {
			break
		}

		return e.complexity.MailerSender.Email(childComplexity), true

	case "MailerSender.name":
		if e.complexity.MailerSender.Name == nil {
			break
		}

		return e.complexity.MailerSender.Name(childComplexity), true

	case "MailerTemplate.createdAt":
		if e.complexity.MailerTemplate.CreatedAt == nil {
			break
		}

		return e.complexity.MailerTemplate.CreatedAt(childComplexity), true

	case "MailerTemplate.deletedAt":
		if e.complexity.MailerTemplate.DeletedAt == nil {
			break
		}

		return e.complexity.MailerTemplate.DeletedAt(childComplexity), true

	case "MailerTemplate.id":
		if e.complexity.MailerTemplate.ID == nil {
			break
		}

		return e.complexity.MailerTemplate.ID(childComplexity), true

	case "MailerTemplate.isActive":
		if e.complexity.MailerTemplate.IsActive == nil {
			break
		}

		return e.complexity.MailerTemplate.IsActive(childComplexity), true

	case "MailerTemplate.message":
		if e.complexity.MailerTemplate.Message == nil {
			break
		}

		return e.complexity.MailerTemplate.Message(childComplexity), true

	case "MailerTemplate.space":
		if e.complexity.MailerTemplate.Space == nil {
			break
		}

		return e.complexity.MailerTemplate.Space(childComplexity), true

	case "MailerTemplate.updatedAt":
		if e.complexity.MailerTemplate.UpdatedAt == nil {
			break
		}

		return e.complexity.MailerTemplate.UpdatedAt(childComplexity), true

	case "MailerTemplate.version":
		if e.complexity.MailerTemplate.Version == nil {
			break
		}

		return e.complexity.MailerTemplate.Version(childComplexity), true

	case "MailerTemplateEvent.id":
		if e.complexity.MailerTemplateEvent.ID == nil {
			break
		}

		return e.complexity.MailerTemplateEvent.ID(childComplexity), true

	case "MailerTemplateEvent.key":
		if e.complexity.MailerTemplateEvent.Key == nil {
			break
		}

		return e.complexity.MailerTemplateEvent.Key(childComplexity), true

	case "MailerTemplateEvent.payload":
		if e.complexity.MailerTemplateEvent.Payload == nil {
			break
		}

		return e.complexity.MailerTemplateEvent.Payload(childComplexity), true

	case "MailerTemplateEvent.template":
		if e.complexity.MailerTemplateEvent.Template == nil {
			break
		}

		return e.complexity.MailerTemplateEvent.Template(childComplexity), true

	case "MailerTemplateEvent.user":
		if e.complexity.MailerTemplateEvent.User == nil {
			break
		}

		return e.complexity.MailerTemplateEvent.User(childComplexity), true

	case "MailerTemplateMessage.bodyHTML":
		if e.complexity.MailerTemplateMessage.BodyHTML == nil {
			break
		}

		return e.complexity.MailerTemplateMessage.BodyHTML(childComplexity), true

	case "MailerTemplateMessage.bodyText":
		if e.complexity.MailerTemplateMessage.BodyText == nil {
			break
		}

		return e.complexity.MailerTemplateMessage.BodyText(childComplexity), true

	case "MailerTemplateMessage.language":
		if e.complexity.MailerTemplateMessage.Language == nil {
			break
		}

		return e.complexity.MailerTemplateMessage.Language(childComplexity), true

	case "MailerTemplateMessage.title":
		if e.complexity.MailerTemplateMessage.Title == nil {
			break
		}

		return e.complexity.MailerTemplateMessage.Title(childComplexity), true

	case "MailerTemplateMutation.create":
		if e.complexity.MailerTemplateMutation.Create == nil {
			break
		}

		return e.complexity.MailerTemplateMutation.Create(childComplexity), true

	case "MailerTemplateMutation.delete":
		if e.complexity.MailerTemplateMutation.Delete == nil {
			break
		}

		return e.complexity.MailerTemplateMutation.Delete(childComplexity), true

	case "MailerTemplateMutation.update":
		if e.complexity.MailerTemplateMutation.Update == nil {
			break
		}

		return e.complexity.MailerTemplateMutation.Update(childComplexity), true

	case "Membership.createdAt":
		if e.complexity.Membership.CreatedAt == nil {
			break
		}

		return e.complexity.Membership.CreatedAt(childComplexity), true

	case "Membership.id":
		if e.complexity.Membership.ID == nil {
			break
		}

		return e.complexity.Membership.ID(childComplexity), true

	case "Membership.isActive":
		if e.complexity.Membership.IsActive == nil {
			break
		}

		return e.complexity.Membership.IsActive(childComplexity), true

	case "Membership.roles":
		if e.complexity.Membership.Roles == nil {
			break
		}

		return e.complexity.Membership.Roles(childComplexity), true

	case "Membership.space":
		if e.complexity.Membership.Space == nil {
			break
		}

		return e.complexity.Membership.Space(childComplexity), true

	case "Membership.updatedAt":
		if e.complexity.Membership.UpdatedAt == nil {
			break
		}

		return e.complexity.Membership.UpdatedAt(childComplexity), true

	case "Membership.user":
		if e.complexity.Membership.User == nil {
			break
		}

		return e.complexity.Membership.User(childComplexity), true

	case "Membership.version":
		if e.complexity.Membership.Version == nil {
			break
		}

		return e.complexity.Membership.Version(childComplexity), true

	case "MembershipConnection.edges":
		if e.complexity.MembershipConnection.Edges == nil {
			break
		}

		return e.complexity.MembershipConnection.Edges(childComplexity), true

	case "MembershipConnection.nodes":
		if e.complexity.MembershipConnection.Nodes == nil {
			break
		}

		return e.complexity.MembershipConnection.Nodes(childComplexity), true

	case "MembershipConnection.pageInfo":
		if e.complexity.MembershipConnection.PageInfo == nil {
			break
		}

		return e.complexity.MembershipConnection.PageInfo(childComplexity), true

	case "MembershipEdge.cursor":
		if e.complexity.MembershipEdge.Cursor == nil {
			break
		}

		return e.complexity.MembershipEdge.Cursor(childComplexity), true

	case "MembershipEdge.node":
		if e.complexity.MembershipEdge.Node == nil {
			break
		}

		return e.complexity.MembershipEdge.Node(childComplexity), true

	case "MembershipInfo.endCursor":
		if e.complexity.MembershipInfo.EndCursor == nil {
			break
		}

		return e.complexity.MembershipInfo.EndCursor(childComplexity), true

	case "MembershipInfo.hasNextPage":
		if e.complexity.MembershipInfo.HasNextPage == nil {
			break
		}

		return e.complexity.MembershipInfo.HasNextPage(childComplexity), true

	case "MembershipInfo.startCursor":
		if e.complexity.MembershipInfo.StartCursor == nil {
			break
		}

		return e.complexity.MembershipInfo.StartCursor(childComplexity), true

	case "Mutation.accessMutation":
		if e.complexity.Mutation.AccessMutation == nil {
			break
		}

		return e.complexity.Mutation.AccessMutation(childComplexity), true

	case "Mutation.applicationMutation":
		if e.complexity.Mutation.ApplicationMutation == nil {
			break
		}

		return e.complexity.Mutation.ApplicationMutation(childComplexity), true

	case "Mutation.mailerMutation":
		if e.complexity.Mutation.MailerMutation == nil {
			break
		}

		return e.complexity.Mutation.MailerMutation(childComplexity), true

	case "Mutation.s3Mutation":
		if e.complexity.Mutation.S3Mutation == nil {
			break
		}

		return e.complexity.Mutation.S3Mutation(childComplexity), true

	case "Mutation.spaceMutation":
		if e.complexity.Mutation.SpaceMutation == nil {
			break
		}

		return e.complexity.Mutation.SpaceMutation(childComplexity), true

	case "Mutation.userMutation":
		if e.complexity.Mutation.UserMutation == nil {
			break
		}

		return e.complexity.Mutation.UserMutation(childComplexity), true

	case "Policy.createdAt":
		if e.complexity.Policy.CreatedAt == nil {
			break
		}

		return e.complexity.Policy.CreatedAt(childComplexity), true

	case "Policy.id":
		if e.complexity.Policy.ID == nil {
			break
		}

		return e.complexity.Policy.ID(childComplexity), true

	case "Policy.kind":
		if e.complexity.Policy.Kind == nil {
			break
		}

		return e.complexity.Policy.Kind(childComplexity), true

	case "Policy.updatedAt":
		if e.complexity.Policy.UpdatedAt == nil {
			break
		}

		return e.complexity.Policy.UpdatedAt(childComplexity), true

	case "Policy.value":
		if e.complexity.Policy.Value == nil {
			break
		}

		return e.complexity.Policy.Value(childComplexity), true

	case "Query.accessQuery":
		if e.complexity.Query.AccessQuery == nil {
			break
		}

		return e.complexity.Query.AccessQuery(childComplexity), true

	case "Query.applicationQuery":
		if e.complexity.Query.ApplicationQuery == nil {
			break
		}

		return e.complexity.Query.ApplicationQuery(childComplexity), true

	case "Query.mailerQuery":
		if e.complexity.Query.MailerQuery == nil {
			break
		}

		return e.complexity.Query.MailerQuery(childComplexity), true

	case "Query.spaceQuery":
		if e.complexity.Query.SpaceQuery == nil {
			break
		}

		return e.complexity.Query.SpaceQuery(childComplexity), true

	case "Query.userQuery":
		if e.complexity.Query.UserQuery == nil {
			break
		}

		return e.complexity.Query.UserQuery(childComplexity), true

	case "S3Mutation.upload":
		if e.complexity.S3Mutation.Upload == nil {
			break
		}

		return e.complexity.S3Mutation.Upload(childComplexity), true

	case "S3UploadMutation.token":
		if e.complexity.S3UploadMutation.Token == nil {
			break
		}

		args, err := ec.field_S3UploadMutation_token_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.S3UploadMutation.Token(childComplexity, args["input"].(dto3.S3UploadTokenInput)), true

	case "Session.context":
		if e.complexity.Session.Context == nil {
			break
		}

		return e.complexity.Session.Context(childComplexity), true

	case "Session.createdAt":
		if e.complexity.Session.CreatedAt == nil {
			break
		}

		return e.complexity.Session.CreatedAt(childComplexity), true

	case "Session.expiredAt":
		if e.complexity.Session.ExpiredAt == nil {
			break
		}

		return e.complexity.Session.ExpiredAt(childComplexity), true

	case "Session.id":
		if e.complexity.Session.ID == nil {
			break
		}

		return e.complexity.Session.ID(childComplexity), true

	case "Session.isActive":
		if e.complexity.Session.IsActive == nil {
			break
		}

		return e.complexity.Session.IsActive(childComplexity), true

	case "Session.jwt":
		if e.complexity.Session.Jwt == nil {
			break
		}

		args, err := ec.field_Session_jwt_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Session.Jwt(childComplexity, args["codeVerifier"].(string)), true

	case "Session.scopes":
		if e.complexity.Session.Scopes == nil {
			break
		}

		return e.complexity.Session.Scopes(childComplexity), true

	case "Session.space":
		if e.complexity.Session.Space == nil {
			break
		}

		return e.complexity.Session.Space(childComplexity), true

	case "Session.updatedAt":
		if e.complexity.Session.UpdatedAt == nil {
			break
		}

		return e.complexity.Session.UpdatedAt(childComplexity), true

	case "Session.user":
		if e.complexity.Session.User == nil {
			break
		}

		return e.complexity.Session.User(childComplexity), true

	case "Session.version":
		if e.complexity.Session.Version == nil {
			break
		}

		return e.complexity.Session.Version(childComplexity), true

	case "SessionArchiveOutcome.errors":
		if e.complexity.SessionArchiveOutcome.Errors == nil {
			break
		}

		return e.complexity.SessionArchiveOutcome.Errors(childComplexity), true

	case "SessionArchiveOutcome.result":
		if e.complexity.SessionArchiveOutcome.Result == nil {
			break
		}

		return e.complexity.SessionArchiveOutcome.Result(childComplexity), true

	case "SessionContext.country":
		if e.complexity.SessionContext.Country == nil {
			break
		}

		return e.complexity.SessionContext.Country(childComplexity), true

	case "SessionContext.deviceName":
		if e.complexity.SessionContext.DeviceName == nil {
			break
		}

		return e.complexity.SessionContext.DeviceName(childComplexity), true

	case "SessionContext.deviceType":
		if e.complexity.SessionContext.DeviceType == nil {
			break
		}

		return e.complexity.SessionContext.DeviceType(childComplexity), true

	case "SessionContext.ipAddress":
		if e.complexity.SessionContext.IPAddress == nil {
			break
		}

		return e.complexity.SessionContext.IPAddress(childComplexity), true

	case "SessionCreateOutcome.errors":
		if e.complexity.SessionCreateOutcome.Errors == nil {
			break
		}

		return e.complexity.SessionCreateOutcome.Errors(childComplexity), true

	case "SessionCreateOutcome.session":
		if e.complexity.SessionCreateOutcome.Session == nil {
			break
		}

		return e.complexity.SessionCreateOutcome.Session(childComplexity), true

	case "SessionCreateOutcome.token":
		if e.complexity.SessionCreateOutcome.Token == nil {
			break
		}

		return e.complexity.SessionCreateOutcome.Token(childComplexity), true

	case "Space.createdAt":
		if e.complexity.Space.CreatedAt == nil {
			break
		}

		return e.complexity.Space.CreatedAt(childComplexity), true

	case "Space.domainNames":
		if e.complexity.Space.DomainNames == nil {
			break
		}

		return e.complexity.Space.DomainNames(childComplexity), true

	case "Space.features":
		if e.complexity.Space.Features == nil {
			break
		}

		return e.complexity.Space.Features(childComplexity), true

	case "Space.id":
		if e.complexity.Space.ID == nil {
			break
		}

		return e.complexity.Space.ID(childComplexity), true

	case "Space.isActive":
		if e.complexity.Space.IsActive == nil {
			break
		}

		return e.complexity.Space.IsActive(childComplexity), true

	case "Space.kind":
		if e.complexity.Space.Kind == nil {
			break
		}

		return e.complexity.Space.Kind(childComplexity), true

	case "Space.language":
		if e.complexity.Space.Language == nil {
			break
		}

		return e.complexity.Space.Language(childComplexity), true

	case "Space.parent":
		if e.complexity.Space.Parent == nil {
			break
		}

		return e.complexity.Space.Parent(childComplexity), true

	case "Space.title":
		if e.complexity.Space.Title == nil {
			break
		}

		return e.complexity.Space.Title(childComplexity), true

	case "Space.updatedAt":
		if e.complexity.Space.UpdatedAt == nil {
			break
		}

		return e.complexity.Space.UpdatedAt(childComplexity), true

	case "Space.version":
		if e.complexity.Space.Version == nil {
			break
		}

		return e.complexity.Space.Version(childComplexity), true

	case "SpaceCreateOutcome.errors":
		if e.complexity.SpaceCreateOutcome.Errors == nil {
			break
		}

		return e.complexity.SpaceCreateOutcome.Errors(childComplexity), true

	case "SpaceCreateOutcome.space":
		if e.complexity.SpaceCreateOutcome.Space == nil {
			break
		}

		return e.complexity.SpaceCreateOutcome.Space(childComplexity), true

	case "SpaceFeatures.register":
		if e.complexity.SpaceFeatures.Register == nil {
			break
		}

		return e.complexity.SpaceFeatures.Register(childComplexity), true

	case "SpaceMembershipCreateOutcome.errors":
		if e.complexity.SpaceMembershipCreateOutcome.Errors == nil {
			break
		}

		return e.complexity.SpaceMembershipCreateOutcome.Errors(childComplexity), true

	case "SpaceMembershipCreateOutcome.membership":
		if e.complexity.SpaceMembershipCreateOutcome.Membership == nil {
			break
		}

		return e.complexity.SpaceMembershipCreateOutcome.Membership(childComplexity), true

	case "SpaceMembershipMutation.create":
		if e.complexity.SpaceMembershipMutation.Create == nil {
			break
		}

		args, err := ec.field_SpaceMembershipMutation_create_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SpaceMembershipMutation.Create(childComplexity, args["input"].(dto4.SpaceMembershipCreateInput)), true

	case "SpaceMembershipMutation.update":
		if e.complexity.SpaceMembershipMutation.Update == nil {
			break
		}

		args, err := ec.field_SpaceMembershipMutation_update_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SpaceMembershipMutation.Update(childComplexity, args["input"].(dto4.SpaceMembershipUpdateInput)), true

	case "SpaceMembershipQuery.find":
		if e.complexity.SpaceMembershipQuery.Find == nil {
			break
		}

		args, err := ec.field_SpaceMembershipQuery_find_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SpaceMembershipQuery.Find(childComplexity, args["first"].(int), args["after"].(*string), args["filters"].(dto4.MembershipsFilter)), true

	case "SpaceMembershipQuery.load":
		if e.complexity.SpaceMembershipQuery.Load == nil {
			break
		}

		args, err := ec.field_SpaceMembershipQuery_load_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SpaceMembershipQuery.Load(childComplexity, args["id"].(string), args["version"].(*string)), true

	case "SpaceMutation.create":
		if e.complexity.SpaceMutation.Create == nil {
			break
		}

		args, err := ec.field_SpaceMutation_create_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SpaceMutation.Create(childComplexity, args["input"].(dto4.SpaceCreateInput)), true

	case "SpaceMutation.membership":
		if e.complexity.SpaceMutation.Membership == nil {
			break
		}

		return e.complexity.SpaceMutation.Membership(childComplexity), true

	case "SpaceMutation.update":
		if e.complexity.SpaceMutation.Update == nil {
			break
		}

		args, err := ec.field_SpaceMutation_update_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SpaceMutation.Update(childComplexity, args["input"].(dto4.SpaceUpdateInput)), true

	case "SpaceQuery.findOne":
		if e.complexity.SpaceQuery.FindOne == nil {
			break
		}

		args, err := ec.field_SpaceQuery_findOne_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SpaceQuery.FindOne(childComplexity, args["filters"].(dto4.SpaceFilters)), true

	case "SpaceQuery.membership":
		if e.complexity.SpaceQuery.Membership == nil {
			break
		}

		return e.complexity.SpaceQuery.Membership(childComplexity), true

	case "User.avatarUri":
		if e.complexity.User.AvatarURI == nil {
			break
		}

		return e.complexity.User.AvatarURI(childComplexity), true

	case "User.createdAt":
		if e.complexity.User.CreatedAt == nil {
			break
		}

		return e.complexity.User.CreatedAt(childComplexity), true

	case "User.emails":
		if e.complexity.User.Emails == nil {
			break
		}

		return e.complexity.User.Emails(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.isActive":
		if e.complexity.User.IsActive == nil {
			break
		}

		return e.complexity.User.IsActive(childComplexity), true

	case "User.language":
		if e.complexity.User.Language == nil {
			break
		}

		return e.complexity.User.Language(childComplexity), true

	case "User.name":
		if e.complexity.User.Name == nil {
			break
		}

		return e.complexity.User.Name(childComplexity), true

	case "User.updatedAt":
		if e.complexity.User.UpdatedAt == nil {
			break
		}

		return e.complexity.User.UpdatedAt(childComplexity), true

	case "User.version":
		if e.complexity.User.Version == nil {
			break
		}

		return e.complexity.User.Version(childComplexity), true

	case "UserEmail.createdAt":
		if e.complexity.UserEmail.CreatedAt == nil {
			break
		}

		return e.complexity.UserEmail.CreatedAt(childComplexity), true

	case "UserEmail.id":
		if e.complexity.UserEmail.ID == nil {
			break
		}

		return e.complexity.UserEmail.ID(childComplexity), true

	case "UserEmail.isActive":
		if e.complexity.UserEmail.IsActive == nil {
			break
		}

		return e.complexity.UserEmail.IsActive(childComplexity), true

	case "UserEmail.updatedAt":
		if e.complexity.UserEmail.UpdatedAt == nil {
			break
		}

		return e.complexity.UserEmail.UpdatedAt(childComplexity), true

	case "UserEmail.value":
		if e.complexity.UserEmail.Value == nil {
			break
		}

		return e.complexity.UserEmail.Value(childComplexity), true

	case "UserEmail.verified":
		if e.complexity.UserEmail.Verified == nil {
			break
		}

		return e.complexity.UserEmail.Verified(childComplexity), true

	case "UserEmails.primary":
		if e.complexity.UserEmails.Primary == nil {
			break
		}

		return e.complexity.UserEmails.Primary(childComplexity), true

	case "UserEmails.secondary":
		if e.complexity.UserEmails.Secondary == nil {
			break
		}

		return e.complexity.UserEmails.Secondary(childComplexity), true

	case "UserMutation.create":
		if e.complexity.UserMutation.Create == nil {
			break
		}

		args, err := ec.field_UserMutation_create_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.UserMutation.Create(childComplexity, args["input"].(*dto5.UserCreateInput)), true

	case "UserMutation.update":
		if e.complexity.UserMutation.Update == nil {
			break
		}

		args, err := ec.field_UserMutation_update_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.UserMutation.Update(childComplexity, args["input"].(dto5.UserUpdateInput)), true

	case "UserMutationOutcome.errors":
		if e.complexity.UserMutationOutcome.Errors == nil {
			break
		}

		return e.complexity.UserMutationOutcome.Errors(childComplexity), true

	case "UserMutationOutcome.user":
		if e.complexity.UserMutationOutcome.User == nil {
			break
		}

		return e.complexity.UserMutationOutcome.User(childComplexity), true

	case "UserName.firstName":
		if e.complexity.UserName.FirstName == nil {
			break
		}

		return e.complexity.UserName.FirstName(childComplexity), true

	case "UserName.lastName":
		if e.complexity.UserName.LastName == nil {
			break
		}

		return e.complexity.UserName.LastName(childComplexity), true

	case "UserName.preferredName":
		if e.complexity.UserName.PreferredName == nil {
			break
		}

		return e.complexity.UserName.PreferredName(childComplexity), true

	case "UserQuery.load":
		if e.complexity.UserQuery.Load == nil {
			break
		}

		args, err := ec.field_UserQuery_load_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.UserQuery.Load(childComplexity, args["id"].(string)), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "pkg/access/api/schema.graphql", Input: `# =====================
# Entites
# =====================
enum AccessScope { Anonymous Authenticated }

type Session {
    id:        ID!
    version:   ID!
    user:      User
    space:     Space!
    scopes:    [AccessScope]
    context:   SessionContext
    isActive:  Boolean!
    createdAt: Time!
    updatedAt: Time!
    expiredAt: Time!
    jwt(codeVerifier: String!): JWT!
}

type SessionContext {
    ipAddress: IP
    country: CountryCode
    deviceType: DeviceType
    deviceName: String
}

enum DeviceType {
    Desktop
    Laptop
    SmartPhone
    Tablet
    TV
}


# =====================
# Query
# =====================
extend type Query {
    accessQuery: AccessQuery!
}

type AccessQuery {
    session: AccessSessionQuery!
}

type AccessSessionQuery {
    load(token: ID!): Session
}

# =====================
# Mutation
# =====================
extend type Mutation {
    accessMutation: AccessMutation!
}

type AccessMutation {
    session: AccessSessionMutation!
}

# ---------------------
# Mutation.accessMutation.create()
# ---------------------
type AccessSessionMutation {
    create(input: SessionCreateInput): SessionCreateOutcome!
}

input SessionCreateInput {
    useCredentials:  SessionCreateUseCredentialsInput
    generateOTLT: SessionCreateGenerateOTLT
    useOTLT: SessionCreateUseOTLT
    context: SessionCreateContextInput
}

input SessionCreateUseCredentialsInput {
    spaceId: ID!
    email: EmailAddress!
    hashedPassword: String!
    codeChallengeMethod: String!
    codeChallenge: String!
}

input SessionCreateGenerateOTLT {
    spaceId: String!
    userId: String!
}

input SessionCreateUseOTLT {
    token: String!
    codeChallengeMethod: String!
    codeChallenge: String!
}

input SessionCreateContextInput {
    ipAddress: IP
    country: CountryCode
    deviceType: DeviceType
    deviceName: String
}

type SessionCreateOutcome {
    errors: [Error!]
    session: Session
    token: String
}

# ---------------------
# Mutation.accessMutation.archive()
# ---------------------
extend type AccessSessionMutation {
    archive: SessionArchiveOutcome! @requireAuth
}

type SessionArchiveOutcome {
    errors: [Error!]
    result: Boolean!
}
`, BuiltIn: false},
	{Name: "pkg/app/api/schema.graphql", Input: `# =====================
# Entity
# =====================
type Application {
    id: ID!
    version: ID!
    isActive: Boolean!
    createdAt: Time!
    updatedAt: Time!
    deletedAt: Time!
}

# =====================
# Query
# =====================
extend type Query {
    applicationQuery: ApplicationQuery!
}

type ApplicationQuery {
    load(id: ID!, version: ID): Application
}

# =====================
# Mutation
# =====================
extend type Mutation {
    applicationMutation: ApplicationMutation!
}

type ApplicationOutcome {
    errors: [Error!]
    app: Application
}

# Mutatation -> Create
type ApplicationMutation {
    create(input: ApplicationCreateInput): ApplicationOutcome!
}

input ApplicationCreateInput {
    isActive: Boolean!
}

# Mutatation -> Update
extend type ApplicationMutation {
    update(input: ApplicationUpdateInput): ApplicationOutcome!
}

input ApplicationUpdateInput {
    id: ID!
    version: ID!
    isActive: Boolean
}
`, BuiltIn: false},
	{Name: "pkg/config/api/entity.graphql", Input: `type ConfigBucket {
    id: ID!
    version: ID!
    slug: ID!
    title: String!
    description: String
    hostId: ID!
    access: AccessMode!
    isPublished: Boolean!
    createdAt: Time!
    updatedAt: Time!
}

type ConfigVariable {
    id: ID!
    version: ID!
    bucketId: ID!
    name: String!
    description: String
    value: String!
    createdAt: Time!
    updatedAt: Time!
    isLocked: Boolean!
}
`, BuiltIn: false},
	{Name: "pkg/infra/api/directives.graphql", Input: `directive @comment(value: String, values: [String!]) on OBJECT | INPUT_OBJECT | FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @requireAuth on FIELD_DEFINITION

directive @constraint(
    maxLength: Int,
    minLength: Int,
) on INPUT_FIELD_DEFINITION | INPUT_OBJECT | FIELD_DEFINITION
`, BuiltIn: false},
	{Name: "pkg/infra/api/enum.graphql", Input: `enum Language { AU US UK VN }

enum ErrorCode   {
	# Input errors
	# ---------------------
	Input

	# internal errors
	# ---------------------
	Config
	Runtime

	# Server errors
	# ---------------------
	DB_Timeout
	DB_Constraint
}

enum ContentType {
	ImagePNG ImageJpeg ImageGif
	ApplicationJson
	ApplicationJsonLD ApplicationPdf ApplicationGzip ApplicationBzip ApplicationZip
	AudioMpeg VideoMpeg
	TextPlain TextCsv
}
`, BuiltIn: false},
	{Name: "pkg/infra/api/scalar.graphql", Input: `scalar AccessMode
scalar Time
scalar Uri
scalar QueryPath
scalar IP
scalar CountryCode
scalar EmailAddress
scalar JWT
scalar Map

type Error {
    code: ErrorCode
    fields: [String!]
    message: String!
}

directive @value(string: String, int: Int) on ENUM_VALUE

enum FileType {
    PDF        @value(string: "application/pdf")
    TXT        @value(string: "text/plain")
    JPEG       @value(string: "image/jpeg")
    PNG        @value(string: "image/png")
    MP3        @value(string: "audio/mpeg")
    MP4        @value(string: "video/mpeg")
    WEBM_AUDIO @value(string: "video/webm")
    WEBM_VIDEO @value(string: "video/webm")
    ZIP        @value(string: "application/zip")
    GZIP       @value(string: "application/gzip")
}
`, BuiltIn: false},
	{Name: "pkg/integration/mailer/api/schema.graphql", Input: `extend type Query  {
    mailerQuery: MailerQuery!
}

extend type Mutation {
    mailerMutation: MailerMutation!
}

type MailerQuery    {
    account: MailerQueryAccount!
}

type MailerMutation {
    account: MailerAccountMutation!
}

type MailerAuditLog {
    id: ID!
    account: MailerAccount!
    spanId: ID!
    template: MailerTemplate,
    createdAt: Time!
    recipientHash: String!
    contextHash: String!
    errorCode: Int
    errorMessage: String
    warningMessagse: String
}
`, BuiltIn: false},
	{Name: "pkg/integration/mailer/api/account/entity.graphql", Input: `type MailerAccount {
    id:            ID!
    version:       ID!
    space:         Space!
    status:        MailerAccountStatus!
    createdAt:     Time!
    updatedAt:     Time!
    deletedAt:     Time
    sender:        MailerSender!
    connectionUrl: String! @comment(value: "encrypted value -- algo('smtp.sendgrid.net:587?username=test@bean.qa&password=bean') ")
    attachment:    MailerAccountAttachment!
}

type MailerAccountAttachment {
    sizeLimit:     Int @comment(value: "Number of bytes. If not provided, use system configuration.")
    sizeLimitEach: Int @comment(value: "Number of bytes. If not provided, use system configuration.")
    fileTypes:     [FileType!]!
}

enum MailerAccountStatus {
    INACTIVE_UNVERIFIED @value(int: 0)
    INACTIVE_VERIFIED   @value(int: 1)
    ACTIVE_UNVERIFIED   @value(int: 2)
    ACTIVE_VERIFIED     @value(int: 3)
}

type MailerSender {
    name:  String!
    email: EmailAddress! @comment(value: "For data dependency, we can not change this value once verified.")
}
`, BuiltIn: false},
	{Name: "pkg/integration/mailer/api/account/mut-create.graphql", Input: `input MailerAccountCreateInput {
    spaceId:       ID!
    isActive:      Boolean!
    sender:        MailerAccountSenderInput!
    connectionUrl: String!
    attachment:    MailerAccountAttachmentInput
}

input MailerAccountSenderInput {
    name:  String!
    email: EmailAddress!
}

input MailerAccountAttachmentInput {
    sizeLimit: Int
    sizeLimitEach: Int
    fileTypes: [FileType!]!
}
`, BuiltIn: false},
	{Name: "pkg/integration/mailer/api/account/mut-update.graphql", Input: `input MailerAccountUpdateInput {
    id:      ID!
    version: ID!
    values:  MailerAccountUpdateValueInput!
}

input MailerAccountUpdateValueInput {
    status:        MailerAccountStatus @comment(values: [
        "Can not change to ACTIVE_VERIFIED   using this mutation.",
        "Can not change to INACTIVE_VERIFIED using this mutation unless from ACTIVE_VERIFIED.",
    ])
    connectionUrl: String @comment(value: "Account will become unverified if this value is provided.")
    sender:        MailerAccountUpdateSenderInput
    attachment:    MailerAccountUpdateSenderInput
}

input MailerAccountUpdateSenderInput {
    name: String        @constraint(maxLength: 128, minLength: 7)
    email: EmailAddress @comment(value: "Can only change when account is not verified.")
}

input MailerAccountUpdateAttachmentInput {
    sizeLimit: Int
    sizeLimitEach: Int
    fileTypes: [FileType!]
}
`, BuiltIn: false},
	{Name: "pkg/integration/mailer/api/account/mut-verify.graphql", Input: ``, BuiltIn: false},
	{Name: "pkg/integration/mailer/api/account/mut.graphql", Input: `type MailerAccountMutation {
    create(input: MailerAccountCreateInput!): MailerAccountMutationOutcome!
    update(input: MailerAccountUpdateInput!): MailerAccountMutationOutcome!
    verify(id: ID!, version: ID!): MailerAccountMutationOutcome!
}

type MailerAccountMutationOutcome {
    account: MailerAccount
    errors: [Error!]
}
`, BuiltIn: false},
	{Name: "pkg/integration/mailer/api/account/query.graphql", Input: `type MailerQueryAccount {
    get(id: ID!): MailerAccount
    getMultiple(first: Int!, after: String): [MailerAccount!]! @requireAuth
}

type MailerAccountConnection {
    pageInfo: MailerAccountPageInfo
    edges: [MailerAccountEdge!]!
}

type MailerAccountPageInfo {
    endCursor: String
    hasNextPage: Boolean!
    startCursor: String
}

type MailerAccountEdge {
    cursor: String!
    node: MailerAccount!
}
`, BuiltIn: false},
	{Name: "pkg/integration/mailer/api/audit/entity.graphql", Input: ``, BuiltIn: false},
	{Name: "pkg/integration/mailer/api/template/entity.graphql", Input: `type MailerTemplate {
    id: ID!
    version: ID!
    space: Space!
    isActive: Boolean!
    createdAt: Time!
    updatedAt: Time!
    deletedAt: Time
    message: MailerTemplateMessage!
}

type MailerTemplateMessage {
    title: String!
    language: Language!
    bodyHTML: String!
    bodyText: String
}

type MailerTemplateEvent {
    id: ID!
    template: MailerTemplate!
    user: User!
    key: MailerTemplateEventKey
    payload: String!
}

enum MailerTemplateEventKey { CREATE UPDATE DELETE }
`, BuiltIn: false},
	{Name: "pkg/integration/mailer/api/template/mut.graphql", Input: `extend type MailerMutation {
    template: MailerTemplateMutation!
}

type MailerTemplateMutation {
    create: Boolean
    update: Boolean
    delete: Boolean
}
`, BuiltIn: false},
	{Name: "pkg/integration/s3/api/schema.graphql", Input: `# =====================
# Entity
# =====================
extend type Application {
    polices: [Policy!]
    credentials: Credentials!
}

enum PolicyKind  {
    FileExtensions,
    RateLimit
}

type Policy {
    id: ID!
    createdAt: Time!
    updatedAt: Time!
    kind: PolicyKind!
    value: String!
}

type Credentials {
    id: ID!
    endpoint: Uri!
    bucket: String!
    isSecure: Boolean!
    accesskey: String! @comment(value: "no secret key")
}

# =====================
# Query
# =====================
# No query?

# =====================
# Mutation
# =====================
extend type Mutation  {
    s3Mutation: S3Mutation!
}

type S3Mutation {
    upload: S3UploadMutation!

    # TODO: put credentials into application
    #     -> do we need it?
    #     -> Should do in application.configuration with predefined schema?
    # TODO: put policy into application
    #     -> do we need it?
    #     -> Should do in application.configuration with predefined schema?
}

input S3ApplicationCredentialsCreateInput {
    endpoint: Uri!
    bucket: String!
    isSecure: Boolean!
    accessKey: String!
    secretKey: String!
}

input S3ApplicationPolicyCreateInput {
    kind: PolicyKind!
    value: String!
}

# ---------------------
# Mutation -> Update
# ---------------------

input S3ApplicationUpdateInput {
    id: ID!
    version: ID!
    isActive: Boolean
    credentials: S3ApplicationCredentialsUpdateInput
    policies: S3ApplicationPolicyMutationInput
}

input S3ApplicationCredentialsUpdateInput {
    endpoint: Uri
    bucket: String
    isSecure: Boolean
    accessKey: String
    secretKey: String
}

input S3ApplicationPolicyMutationInput {
    create: [S3ApplicationPolicyCreateInput!]
    update: [S3ApplicationPolicyUpdateInput!]
    delete: [S3ApplicationPolicyDeleteInput!]
}

input S3ApplicationPolicyUpdateInput {
    id: ID!
    value: String!
}

input S3ApplicationPolicyDeleteInput {
    id: ID!
}

# ---------------------
# Mutation -> Upload
# ---------------------
type S3UploadMutation {
    token(input: S3UploadTokenInput!): Map! @requireAuth
}

input S3UploadTokenInput {
    applicationId: ID!
    filePath:      Uri! @constraint(minLength: 7, maxLength: 128)
    contentType:   ContentType!
}
`, BuiltIn: false},
	{Name: "pkg/space/api/_mutation.graphql", Input: `extend type Mutation {
    spaceMutation: SpaceMutation!
}

type SpaceMutation {
    create(input: SpaceCreateInput!): SpaceCreateOutcome!
    update(input: SpaceUpdateInput!): SpaceCreateOutcome!
    membership: SpaceMembershipMutation!
}

type SpaceMembershipMutation {
    create(input: SpaceMembershipCreateInput!): SpaceMembershipCreateOutcome!
    update(input: SpaceMembershipUpdateInput!): SpaceMembershipCreateOutcome!
}
`, BuiltIn: false},
	{Name: "pkg/space/api/_query.graphql", Input: `extend type Query {
    spaceQuery: SpaceQuery!
}

type SpaceQuery {
    findOne(filters: SpaceFilters!): Space
    membership: SpaceMembershipQuery!
}

type SpaceMembershipQuery {
    load(id: ID!, version: ID): Membership
    find(first: Int!, after: String, filters: MembershipsFilter!): MembershipConnection!
}
`, BuiltIn: false},
	{Name: "pkg/space/api/entity.graphql", Input: `enum SpaceKind { Organisation, Role }

type Space {
    id: ID!
    version: ID!
    kind: SpaceKind!
    title: String
    createdAt: Time!
    updatedAt: Time!
    isActive: Boolean!
    domainNames: DomainNames
    features: SpaceFeatures
    language: Language!
    parent: Space
}

type DomainNames {
    primary: DomainName!
    secondary: [DomainName]
}

type DomainName {
    id: ID!
    value: String!
    createdAt: Time!
    updatedAt: Time!
    isActive: Boolean!
    isVerified: Boolean!
}

type SpaceFeatures {
    register: Boolean!
}
`, BuiltIn: false},
	{Name: "pkg/space/api/membership.graphql", Input: `type Membership {
	id: ID!
	version: ID!
	space: Space!
	user: User!
	isActive: Boolean!
	createdAt: Time!
	updatedAt: Time!
	roles: [Space!]!
}
`, BuiltIn: false},
	{Name: "pkg/space/api/membership.mut.create.graphql", Input: `input SpaceMembershipCreateInput {
    spaceId: ID!
    userId: ID!
    isActive: Boolean!
    managerMemberIds: [ID!]!
}

type SpaceMembershipCreateOutcome {
    errors: [Error!]
    membership: Membership
}
`, BuiltIn: false},
	{Name: "pkg/space/api/membership.mut.update.graphql", Input: `input SpaceMembershipUpdateInput {
    id: ID!
    version: ID!
    Language: Language
    isActive: Boolean!
}
`, BuiltIn: false},
	{Name: "pkg/space/api/membership.query.get.graphql", Input: `input MembershipsFilter {
    space: MembershipsFilterSpace
    userId: ID!
    isActive: Boolean!
    managerId: ID
}

input MembershipsFilterSpace {
    title: String
    domainName: String
}

type MembershipConnection {
    edges: [MembershipEdge!]!
    nodes: [Membership!]!
    pageInfo: MembershipInfo!
}

type MembershipEdge {
    cursor: String!
    node: Membership!
}

type MembershipInfo {
    endCursor: String
    hasNextPage: Boolean!
    startCursor: String
}
`, BuiltIn: false},
	{Name: "pkg/space/api/space.mut.create.graphql", Input: `input SpaceCreateInput {
    object: SpaceCreateInputObject!
}

input SpaceCreateInputObject {
    kind: SpaceKind!
    title: String
    language: Language!
    isActive: Boolean!
    domainNames: DomainNamesInput
    features: SpaceFeaturesInput!
}

input SpaceFeaturesInput {
    register: Boolean!
}

input DomainNamesInput {
    primary: DomainNameInput!
    secondary: [DomainNameInput]
}

input DomainNameInput {
    verified: Boolean
    value: String
    isActive: Boolean
}

type SpaceCreateOutcome {
    errors: [Error!]
    space: Space
}
`, BuiltIn: false},
	{Name: "pkg/space/api/space.mut.update.graphql", Input: `input SpaceUpdateInput {
    spaceId: ID!
    spaceVersion: ID!
    object: SpaceUpdateInputObject
}

input SpaceUpdateInputObject {
    features: SpaceUpdateInputFeatures
}

input SpaceUpdateInputFeatures {
    register: Boolean
}
`, BuiltIn: false},
	{Name: "pkg/space/api/space.query.graphql", Input: `input SpaceFilters {
    id: ID
    domain: Uri
}
`, BuiltIn: false},
	{Name: "pkg/user/api/entity.graphql", Input: `type User {
    id:        ID!
    version:   ID!
    name:      UserName!
    emails:    UserEmails
    avatarUri: Uri
    isActive:  Boolean!
    createdAt: Time!
    updatedAt: Time!
    language:  Language!
}

type UserName {
    firstName:     String
    lastName:      String
    preferredName: String
}

type UserEmails {
    primary:   UserEmail
    secondary: [UserEmail]
}

type UserEmail {
    id:        ID!
    verified:  Boolean!
    value:     EmailAddress!
    createdAt: Time!
    updatedAt: Time!
    isActive:  Boolean!
}
`, BuiltIn: false},
	{Name: "pkg/user/api/mut-create.graphql", Input: `input UserCreateInput {
    name: UserNameInput!
    emails: UserEmailsInput
    password: UserPasswordInput!
    avatarUri: Uri
    isActive: Boolean!
}

input UserNameInput {
    firstName: String
    lastName: String
    preferredName: String
}

input UserEmailsInput {
    primary: UserEmailInput!
    secondary: [UserEmailInput]
}

input UserEmailInput {
    verified: Boolean!
    value: EmailAddress!
    isActive: Boolean!
}

input UserPasswordInput {
    hashedValue: String!
}

type UserMutationOutcome {
    user: User
    errors: [Error!]
}
`, BuiltIn: false},
	{Name: "pkg/user/api/mut-update.graphql", Input: `input UserUpdateInput {
    id: ID!
    version: ID!
    values: UserUpdateValuesInput
}

input UserUpdateValuesInput {
    password: UserPasswordInput!
}
`, BuiltIn: false},
	{Name: "pkg/user/api/mut.graphql", Input: `extend type Mutation {
    userMutation: UserMutation!
}

type UserMutation {
    create(input: UserCreateInput): UserMutationOutcome!
    update(input: UserUpdateInput!): UserMutationOutcome!
}
`, BuiltIn: false},
	{Name: "pkg/user/api/query.graphql", Input: `extend type Query {
    userQuery: UserQuery!
}

type UserQuery {
    load(id: ID!): User
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) dir_comment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["value"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["value"] = arg0
	var arg1 []string
	if tmp, ok := rawArgs["values"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("values"))
		arg1, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["values"] = arg1
	return args, nil
}

func (ec *executionContext) dir_constraint_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["maxLength"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxLength"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["maxLength"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["minLength"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minLength"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["minLength"] = arg1
	return args, nil
}

func (ec *executionContext) dir_value_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["string"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("string"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["string"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["int"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("int"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["int"] = arg1
	return args, nil
}

func (ec *executionContext) field_AccessSessionMutation_create_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *dto.SessionCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOSessionCreateInput2ᚖbeanᚋpkgᚋaccessᚋmodelᚋdtoᚐSessionCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_AccessSessionQuery_load_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	return args, nil
}

func (ec *executionContext) field_ApplicationMutation_create_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *dto1.ApplicationCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOApplicationCreateInput2ᚖbeanᚋpkgᚋappᚋmodelᚋdtoᚐApplicationCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_ApplicationMutation_update_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *dto1.ApplicationUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOApplicationUpdateInput2ᚖbeanᚋpkgᚋappᚋmodelᚋdtoᚐApplicationUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_ApplicationQuery_load_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["version"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["version"] = arg1
	return args, nil
}

func (ec *executionContext) field_MailerAccountMutation_create_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto2.MailerAccountCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNMailerAccountCreateInput2beanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccountCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_MailerAccountMutation_update_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto2.MailerAccountUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNMailerAccountUpdateInput2beanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccountUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_MailerAccountMutation_verify_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["version"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["version"] = arg1
	return args, nil
}

func (ec *executionContext) field_MailerQueryAccount_getMultiple_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	return args, nil
}

func (ec *executionContext) field_MailerQueryAccount_get_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_S3UploadMutation_token_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto3.S3UploadTokenInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNS3UploadTokenInput2beanᚋpkgᚋintegrationᚋs3ᚋmodelᚋdtoᚐS3UploadTokenInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Session_jwt_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["codeVerifier"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeVerifier"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["codeVerifier"] = arg0
	return args, nil
}

func (ec *executionContext) field_SpaceMembershipMutation_create_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto4.SpaceMembershipCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNSpaceMembershipCreateInput2beanᚋpkgᚋspaceᚋmodelᚋdtoᚐSpaceMembershipCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_SpaceMembershipMutation_update_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto4.SpaceMembershipUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNSpaceMembershipUpdateInput2beanᚋpkgᚋspaceᚋmodelᚋdtoᚐSpaceMembershipUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_SpaceMembershipQuery_find_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg1
	var arg2 dto4.MembershipsFilter
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg2, err = ec.unmarshalNMembershipsFilter2beanᚋpkgᚋspaceᚋmodelᚋdtoᚐMembershipsFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg2
	return args, nil
}

func (ec *executionContext) field_SpaceMembershipQuery_load_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["version"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["version"] = arg1
	return args, nil
}

func (ec *executionContext) field_SpaceMutation_create_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto4.SpaceCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNSpaceCreateInput2beanᚋpkgᚋspaceᚋmodelᚋdtoᚐSpaceCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_SpaceMutation_update_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto4.SpaceUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNSpaceUpdateInput2beanᚋpkgᚋspaceᚋmodelᚋdtoᚐSpaceUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_SpaceQuery_findOne_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto4.SpaceFilters
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg0, err = ec.unmarshalNSpaceFilters2beanᚋpkgᚋspaceᚋmodelᚋdtoᚐSpaceFilters(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg0
	return args, nil
}

func (ec *executionContext) field_UserMutation_create_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *dto5.UserCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOUserCreateInput2ᚖbeanᚋpkgᚋuserᚋmodelᚋdtoᚐUserCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_UserMutation_update_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto5.UserUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserUpdateInput2beanᚋpkgᚋuserᚋmodelᚋdtoᚐUserUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_UserQuery_load_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _AccessMutation_session(ctx context.Context, field graphql.CollectedField, obj *dto.AccessMutation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccessMutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AccessMutation().Session(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.AccessSessionMutation)
	fc.Result = res
	return ec.marshalNAccessSessionMutation2ᚖbeanᚋpkgᚋaccessᚋmodelᚋdtoᚐAccessSessionMutation(ctx, field.Selections, res)
}

func (ec *executionContext) _AccessQuery_session(ctx context.Context, field graphql.CollectedField, obj *dto.AccessQuery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccessQuery",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AccessQuery().Session(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.AccessSessionQuery)
	fc.Result = res
	return ec.marshalNAccessSessionQuery2ᚖbeanᚋpkgᚋaccessᚋmodelᚋdtoᚐAccessSessionQuery(ctx, field.Selections, res)
}

func (ec *executionContext) _AccessSessionMutation_create(ctx context.Context, field graphql.CollectedField, obj *dto.AccessSessionMutation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccessSessionMutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_AccessSessionMutation_create_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AccessSessionMutation().Create(rctx, obj, args["input"].(*dto.SessionCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.SessionCreateOutcome)
	fc.Result = res
	return ec.marshalNSessionCreateOutcome2ᚖbeanᚋpkgᚋaccessᚋmodelᚋdtoᚐSessionCreateOutcome(ctx, field.Selections, res)
}

func (ec *executionContext) _AccessSessionMutation_archive(ctx context.Context, field graphql.CollectedField, obj *dto.AccessSessionMutation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccessSessionMutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.AccessSessionMutation().Archive(rctx, obj)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.RequireAuth == nil {
				return nil, errors.New("directive requireAuth is not implemented")
			}
			return ec.directives.RequireAuth(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*dto.SessionArchiveOutcome); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *bean/pkg/access/model/dto.SessionArchiveOutcome`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.SessionArchiveOutcome)
	fc.Result = res
	return ec.marshalNSessionArchiveOutcome2ᚖbeanᚋpkgᚋaccessᚋmodelᚋdtoᚐSessionArchiveOutcome(ctx, field.Selections, res)
}

func (ec *executionContext) _AccessSessionQuery_load(ctx context.Context, field graphql.CollectedField, obj *dto.AccessSessionQuery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccessSessionQuery",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_AccessSessionQuery_load_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AccessSessionQuery().Load(rctx, obj, args["token"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Session)
	fc.Result = res
	return ec.marshalOSession2ᚖbeanᚋpkgᚋaccessᚋmodelᚐSession(ctx, field.Selections, res)
}

func (ec *executionContext) _Application_id(ctx context.Context, field graphql.CollectedField, obj *model1.Application) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Application",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Application_version(ctx context.Context, field graphql.CollectedField, obj *model1.Application) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Application",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Application_isActive(ctx context.Context, field graphql.CollectedField, obj *model1.Application) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Application",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Application_createdAt(ctx context.Context, field graphql.CollectedField, obj *model1.Application) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Application",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Application_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model1.Application) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Application",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Application_deletedAt(ctx context.Context, field graphql.CollectedField, obj *model1.Application) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Application",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalNTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Application_polices(ctx context.Context, field graphql.CollectedField, obj *model1.Application) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Application",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Application().Polices(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model2.Policy)
	fc.Result = res
	return ec.marshalOPolicy2ᚕᚖbeanᚋpkgᚋintegrationᚋs3ᚋmodelᚐPolicyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Application_credentials(ctx context.Context, field graphql.CollectedField, obj *model1.Application) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Application",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Application().Credentials(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model2.Credentials)
	fc.Result = res
	return ec.marshalNCredentials2ᚖbeanᚋpkgᚋintegrationᚋs3ᚋmodelᚐCredentials(ctx, field.Selections, res)
}

func (ec *executionContext) _ApplicationMutation_create(ctx context.Context, field graphql.CollectedField, obj *dto1.ApplicationMutation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApplicationMutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_ApplicationMutation_create_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ApplicationMutation().Create(rctx, obj, args["input"].(*dto1.ApplicationCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto1.ApplicationOutcome)
	fc.Result = res
	return ec.marshalNApplicationOutcome2ᚖbeanᚋpkgᚋappᚋmodelᚋdtoᚐApplicationOutcome(ctx, field.Selections, res)
}

func (ec *executionContext) _ApplicationMutation_update(ctx context.Context, field graphql.CollectedField, obj *dto1.ApplicationMutation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApplicationMutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_ApplicationMutation_update_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ApplicationMutation().Update(rctx, obj, args["input"].(*dto1.ApplicationUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto1.ApplicationOutcome)
	fc.Result = res
	return ec.marshalNApplicationOutcome2ᚖbeanᚋpkgᚋappᚋmodelᚋdtoᚐApplicationOutcome(ctx, field.Selections, res)
}

func (ec *executionContext) _ApplicationOutcome_errors(ctx context.Context, field graphql.CollectedField, obj *dto1.ApplicationOutcome) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApplicationOutcome",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Errors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*util.Error)
	fc.Result = res
	return ec.marshalOError2ᚕᚖbeanᚋcomponentsᚋutilᚐErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ApplicationOutcome_app(ctx context.Context, field graphql.CollectedField, obj *dto1.ApplicationOutcome) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApplicationOutcome",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.App, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.Application)
	fc.Result = res
	return ec.marshalOApplication2ᚖbeanᚋpkgᚋappᚋmodelᚐApplication(ctx, field.Selections, res)
}

func (ec *executionContext) _ApplicationQuery_load(ctx context.Context, field graphql.CollectedField, obj *dto1.ApplicationQuery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApplicationQuery",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_ApplicationQuery_load_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ApplicationQuery().Load(rctx, obj, args["id"].(string), args["version"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.Application)
	fc.Result = res
	return ec.marshalOApplication2ᚖbeanᚋpkgᚋappᚋmodelᚐApplication(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigBucket_id(ctx context.Context, field graphql.CollectedField, obj *model5.ConfigBucket) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigBucket",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Id, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigBucket_version(ctx context.Context, field graphql.CollectedField, obj *model5.ConfigBucket) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigBucket",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigBucket_slug(ctx context.Context, field graphql.CollectedField, obj *model5.ConfigBucket) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigBucket",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Slug, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigBucket_title(ctx context.Context, field graphql.CollectedField, obj *model5.ConfigBucket) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigBucket",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigBucket_description(ctx context.Context, field graphql.CollectedField, obj *model5.ConfigBucket) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigBucket",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigBucket_hostId(ctx context.Context, field graphql.CollectedField, obj *model5.ConfigBucket) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigBucket",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HostId, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigBucket_access(ctx context.Context, field graphql.CollectedField, obj *model5.ConfigBucket) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigBucket",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Access, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(scalar.AccessMode)
	fc.Result = res
	return ec.marshalNAccessMode2beanᚋcomponentsᚋscalarᚐAccessMode(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigBucket_isPublished(ctx context.Context, field graphql.CollectedField, obj *model5.ConfigBucket) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigBucket",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsPublished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigBucket_createdAt(ctx context.Context, field graphql.CollectedField, obj *model5.ConfigBucket) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigBucket",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigBucket_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model5.ConfigBucket) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigBucket",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigVariable_id(ctx context.Context, field graphql.CollectedField, obj *model5.ConfigVariable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigVariable",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Id, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigVariable_version(ctx context.Context, field graphql.CollectedField, obj *model5.ConfigVariable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigVariable",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigVariable_bucketId(ctx context.Context, field graphql.CollectedField, obj *model5.ConfigVariable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigVariable",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BucketId, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigVariable_name(ctx context.Context, field graphql.CollectedField, obj *model5.ConfigVariable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigVariable",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigVariable_description(ctx context.Context, field graphql.CollectedField, obj *model5.ConfigVariable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigVariable",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigVariable_value(ctx context.Context, field graphql.CollectedField, obj *model5.ConfigVariable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigVariable",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigVariable_createdAt(ctx context.Context, field graphql.CollectedField, obj *model5.ConfigVariable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigVariable",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigVariable_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model5.ConfigVariable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigVariable",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigVariable_isLocked(ctx context.Context, field graphql.CollectedField, obj *model5.ConfigVariable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigVariable",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsLocked, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Credentials_id(ctx context.Context, field graphql.CollectedField, obj *model2.Credentials) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Credentials",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Credentials_endpoint(ctx context.Context, field graphql.CollectedField, obj *model2.Credentials) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Credentials",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Endpoint, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(scalar.Uri)
	fc.Result = res
	return ec.marshalNUri2beanᚋcomponentsᚋscalarᚐUri(ctx, field.Selections, res)
}

func (ec *executionContext) _Credentials_bucket(ctx context.Context, field graphql.CollectedField, obj *model2.Credentials) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Credentials",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bucket, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Credentials_isSecure(ctx context.Context, field graphql.CollectedField, obj *model2.Credentials) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Credentials",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSecure, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Credentials_accesskey(ctx context.Context, field graphql.CollectedField, obj *model2.Credentials) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Credentials",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.AccessKey, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			value, err := ec.unmarshalOString2ᚖstring(ctx, "no secret key")
			if err != nil {
				return nil, err
			}
			if ec.directives.Comment == nil {
				return nil, errors.New("directive comment is not implemented")
			}
			return ec.directives.Comment(ctx, obj, directive0, value, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DomainName_id(ctx context.Context, field graphql.CollectedField, obj *model3.DomainName) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DomainName",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DomainName_value(ctx context.Context, field graphql.CollectedField, obj *model3.DomainName) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DomainName",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DomainName_createdAt(ctx context.Context, field graphql.CollectedField, obj *model3.DomainName) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DomainName",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DomainName_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model3.DomainName) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DomainName",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DomainName_isActive(ctx context.Context, field graphql.CollectedField, obj *model3.DomainName) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DomainName",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _DomainName_isVerified(ctx context.Context, field graphql.CollectedField, obj *model3.DomainName) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DomainName",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsVerified, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _DomainNames_primary(ctx context.Context, field graphql.CollectedField, obj *model3.DomainNames) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DomainNames",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Primary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model3.DomainName)
	fc.Result = res
	return ec.marshalNDomainName2ᚖbeanᚋpkgᚋspaceᚋmodelᚐDomainName(ctx, field.Selections, res)
}

func (ec *executionContext) _DomainNames_secondary(ctx context.Context, field graphql.CollectedField, obj *model3.DomainNames) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DomainNames",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Secondary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model3.DomainName)
	fc.Result = res
	return ec.marshalODomainName2ᚕᚖbeanᚋpkgᚋspaceᚋmodelᚐDomainName(ctx, field.Selections, res)
}

func (ec *executionContext) _Error_code(ctx context.Context, field graphql.CollectedField, obj *util.Error) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Error",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*util.ErrorCode)
	fc.Result = res
	return ec.marshalOErrorCode2ᚖbeanᚋcomponentsᚋutilᚐErrorCode(ctx, field.Selections, res)
}

func (ec *executionContext) _Error_fields(ctx context.Context, field graphql.CollectedField, obj *util.Error) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Error",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Error_message(ctx context.Context, field graphql.CollectedField, obj *util.Error) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Error",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerAccount_id(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerAccount_version(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerAccount_space(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Space, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model3.Space)
	fc.Result = res
	return ec.marshalNSpace2ᚖbeanᚋpkgᚋspaceᚋmodelᚐSpace(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerAccount_status(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(dto2.MailerAccountStatus)
	fc.Result = res
	return ec.marshalNMailerAccountStatus2beanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccountStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerAccount_createdAt(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerAccount_updatedAt(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerAccount_deletedAt(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerAccount_sender(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto2.MailerSender)
	fc.Result = res
	return ec.marshalNMailerSender2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerSender(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerAccount_connectionUrl(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.ConnectionURL, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			value, err := ec.unmarshalOString2ᚖstring(ctx, "encrypted value -- algo('smtp.sendgrid.net:587?username=test@bean.qa&password=bean') ")
			if err != nil {
				return nil, err
			}
			if ec.directives.Comment == nil {
				return nil, errors.New("directive comment is not implemented")
			}
			return ec.directives.Comment(ctx, obj, directive0, value, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerAccount_attachment(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attachment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto2.MailerAccountAttachment)
	fc.Result = res
	return ec.marshalNMailerAccountAttachment2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccountAttachment(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerAccountAttachment_sizeLimit(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerAccountAttachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerAccountAttachment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.SizeLimit, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			value, err := ec.unmarshalOString2ᚖstring(ctx, "Number of bytes. If not provided, use system configuration.")
			if err != nil {
				return nil, err
			}
			if ec.directives.Comment == nil {
				return nil, errors.New("directive comment is not implemented")
			}
			return ec.directives.Comment(ctx, obj, directive0, value, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*int); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerAccountAttachment_sizeLimitEach(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerAccountAttachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerAccountAttachment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.SizeLimitEach, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			value, err := ec.unmarshalOString2ᚖstring(ctx, "Number of bytes. If not provided, use system configuration.")
			if err != nil {
				return nil, err
			}
			if ec.directives.Comment == nil {
				return nil, errors.New("directive comment is not implemented")
			}
			return ec.directives.Comment(ctx, obj, directive0, value, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*int); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerAccountAttachment_fileTypes(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerAccountAttachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerAccountAttachment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileTypes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]api.FileType)
	fc.Result = res
	return ec.marshalNFileType2ᚕbeanᚋpkgᚋinfraᚋapiᚐFileTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerAccountConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerAccountConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerAccountConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto2.MailerAccountPageInfo)
	fc.Result = res
	return ec.marshalOMailerAccountPageInfo2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccountPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerAccountConnection_edges(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerAccountConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerAccountConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*dto2.MailerAccountEdge)
	fc.Result = res
	return ec.marshalNMailerAccountEdge2ᚕᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccountEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerAccountEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerAccountEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerAccountEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerAccountEdge_node(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerAccountEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerAccountEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto2.MailerAccount)
	fc.Result = res
	return ec.marshalNMailerAccount2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccount(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerAccountMutation_create(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerAccountMutation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerAccountMutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_MailerAccountMutation_create_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MailerAccountMutation().Create(rctx, obj, args["input"].(dto2.MailerAccountCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto2.MailerAccountMutationOutcome)
	fc.Result = res
	return ec.marshalNMailerAccountMutationOutcome2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccountMutationOutcome(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerAccountMutation_update(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerAccountMutation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerAccountMutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_MailerAccountMutation_update_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MailerAccountMutation().Update(rctx, obj, args["input"].(dto2.MailerAccountUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto2.MailerAccountMutationOutcome)
	fc.Result = res
	return ec.marshalNMailerAccountMutationOutcome2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccountMutationOutcome(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerAccountMutation_verify(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerAccountMutation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerAccountMutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_MailerAccountMutation_verify_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MailerAccountMutation().Verify(rctx, obj, args["id"].(string), args["version"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto2.MailerAccountMutationOutcome)
	fc.Result = res
	return ec.marshalNMailerAccountMutationOutcome2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccountMutationOutcome(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerAccountMutationOutcome_account(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerAccountMutationOutcome) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerAccountMutationOutcome",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Account, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto2.MailerAccount)
	fc.Result = res
	return ec.marshalOMailerAccount2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccount(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerAccountMutationOutcome_errors(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerAccountMutationOutcome) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerAccountMutationOutcome",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Errors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*util.Error)
	fc.Result = res
	return ec.marshalOError2ᚕᚖbeanᚋcomponentsᚋutilᚐErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerAccountPageInfo_endCursor(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerAccountPageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerAccountPageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerAccountPageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerAccountPageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerAccountPageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerAccountPageInfo_startCursor(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerAccountPageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerAccountPageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerAuditLog_id(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerAuditLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerAuditLog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerAuditLog_account(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerAuditLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerAuditLog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Account, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto2.MailerAccount)
	fc.Result = res
	return ec.marshalNMailerAccount2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccount(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerAuditLog_spanId(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerAuditLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerAuditLog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpanID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerAuditLog_template(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerAuditLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerAuditLog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Template, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto2.MailerTemplate)
	fc.Result = res
	return ec.marshalOMailerTemplate2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerAuditLog_createdAt(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerAuditLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerAuditLog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerAuditLog_recipientHash(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerAuditLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerAuditLog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecipientHash, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerAuditLog_contextHash(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerAuditLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerAuditLog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContextHash, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerAuditLog_errorCode(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerAuditLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerAuditLog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ErrorCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerAuditLog_errorMessage(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerAuditLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerAuditLog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ErrorMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerAuditLog_warningMessagse(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerAuditLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerAuditLog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WarningMessagse, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerMutation_account(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerMutation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerMutation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Account, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto2.MailerAccountMutation)
	fc.Result = res
	return ec.marshalNMailerAccountMutation2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccountMutation(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerMutation_template(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerMutation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerMutation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Template, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto2.MailerTemplateMutation)
	fc.Result = res
	return ec.marshalNMailerTemplateMutation2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerTemplateMutation(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerQuery_account(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerQuery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerQuery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Account, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto2.MailerQueryAccount)
	fc.Result = res
	return ec.marshalNMailerQueryAccount2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerQueryAccount(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerQueryAccount_get(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerQueryAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerQueryAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_MailerQueryAccount_get_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MailerQueryAccount().Get(rctx, obj, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto2.MailerAccount)
	fc.Result = res
	return ec.marshalOMailerAccount2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccount(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerQueryAccount_getMultiple(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerQueryAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerQueryAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_MailerQueryAccount_getMultiple_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.MailerQueryAccount().GetMultiple(rctx, obj, args["first"].(int), args["after"].(*string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.RequireAuth == nil {
				return nil, errors.New("directive requireAuth is not implemented")
			}
			return ec.directives.RequireAuth(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*dto2.MailerAccount); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*bean/pkg/integration/mailer/model/dto.MailerAccount`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*dto2.MailerAccount)
	fc.Result = res
	return ec.marshalNMailerAccount2ᚕᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccountᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerSender_name(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerSender) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerSender",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerSender_email(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerSender) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerSender",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Email, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			value, err := ec.unmarshalOString2ᚖstring(ctx, "For data dependency, we can not change this value once verified.")
			if err != nil {
				return nil, err
			}
			if ec.directives.Comment == nil {
				return nil, errors.New("directive comment is not implemented")
			}
			return ec.directives.Comment(ctx, obj, directive0, value, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(scalar.EmailAddress); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bean/components/scalar.EmailAddress`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(scalar.EmailAddress)
	fc.Result = res
	return ec.marshalNEmailAddress2beanᚋcomponentsᚋscalarᚐEmailAddress(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerTemplate_id(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerTemplate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerTemplate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerTemplate_version(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerTemplate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerTemplate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerTemplate_space(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerTemplate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerTemplate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Space, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model3.Space)
	fc.Result = res
	return ec.marshalNSpace2ᚖbeanᚋpkgᚋspaceᚋmodelᚐSpace(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerTemplate_isActive(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerTemplate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerTemplate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerTemplate_createdAt(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerTemplate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerTemplate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerTemplate_updatedAt(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerTemplate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerTemplate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerTemplate_deletedAt(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerTemplate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerTemplate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerTemplate_message(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerTemplate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerTemplate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto2.MailerTemplateMessage)
	fc.Result = res
	return ec.marshalNMailerTemplateMessage2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerTemplateMessage(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerTemplateEvent_id(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerTemplateEvent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerTemplateEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerTemplateEvent_template(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerTemplateEvent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerTemplateEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Template, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto2.MailerTemplate)
	fc.Result = res
	return ec.marshalNMailerTemplate2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerTemplateEvent_user(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerTemplateEvent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerTemplateEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model4.User)
	fc.Result = res
	return ec.marshalNUser2ᚖbeanᚋpkgᚋuserᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerTemplateEvent_key(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerTemplateEvent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerTemplateEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto2.MailerTemplateEventKey)
	fc.Result = res
	return ec.marshalOMailerTemplateEventKey2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerTemplateEventKey(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerTemplateEvent_payload(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerTemplateEvent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerTemplateEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Payload, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerTemplateMessage_title(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerTemplateMessage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerTemplateMessage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerTemplateMessage_language(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerTemplateMessage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerTemplateMessage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Language, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(api.Language)
	fc.Result = res
	return ec.marshalNLanguage2beanᚋpkgᚋinfraᚋapiᚐLanguage(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerTemplateMessage_bodyHTML(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerTemplateMessage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerTemplateMessage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BodyHTML, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerTemplateMessage_bodyText(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerTemplateMessage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerTemplateMessage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BodyText, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerTemplateMutation_create(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerTemplateMutation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerTemplateMutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MailerTemplateMutation().Create(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerTemplateMutation_update(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerTemplateMutation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerTemplateMutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MailerTemplateMutation().Update(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MailerTemplateMutation_delete(ctx context.Context, field graphql.CollectedField, obj *dto2.MailerTemplateMutation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MailerTemplateMutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MailerTemplateMutation().Delete(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Membership_id(ctx context.Context, field graphql.CollectedField, obj *model3.Membership) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Membership",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Membership_version(ctx context.Context, field graphql.CollectedField, obj *model3.Membership) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Membership",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Membership_space(ctx context.Context, field graphql.CollectedField, obj *model3.Membership) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Membership",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Membership().Space(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model3.Space)
	fc.Result = res
	return ec.marshalNSpace2ᚖbeanᚋpkgᚋspaceᚋmodelᚐSpace(ctx, field.Selections, res)
}

func (ec *executionContext) _Membership_user(ctx context.Context, field graphql.CollectedField, obj *model3.Membership) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Membership",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Membership().User(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model4.User)
	fc.Result = res
	return ec.marshalNUser2ᚖbeanᚋpkgᚋuserᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Membership_isActive(ctx context.Context, field graphql.CollectedField, obj *model3.Membership) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Membership",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Membership_createdAt(ctx context.Context, field graphql.CollectedField, obj *model3.Membership) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Membership",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Membership_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model3.Membership) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Membership",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Membership_roles(ctx context.Context, field graphql.CollectedField, obj *model3.Membership) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Membership",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Membership().Roles(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model3.Space)
	fc.Result = res
	return ec.marshalNSpace2ᚕᚖbeanᚋpkgᚋspaceᚋmodelᚐSpaceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _MembershipConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model3.MembershipConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MembershipConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MembershipConnection().Edges(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model3.MembershipEdge)
	fc.Result = res
	return ec.marshalNMembershipEdge2ᚕᚖbeanᚋpkgᚋspaceᚋmodelᚐMembershipEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _MembershipConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model3.MembershipConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MembershipConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model3.Membership)
	fc.Result = res
	return ec.marshalNMembership2ᚕbeanᚋpkgᚋspaceᚋmodelᚐMembershipᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _MembershipConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model3.MembershipConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MembershipConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model3.MembershipInfo)
	fc.Result = res
	return ec.marshalNMembershipInfo2beanᚋpkgᚋspaceᚋmodelᚐMembershipInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _MembershipEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model3.MembershipEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MembershipEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MembershipEdge_node(ctx context.Context, field graphql.CollectedField, obj *model3.MembershipEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MembershipEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model3.Membership)
	fc.Result = res
	return ec.marshalNMembership2beanᚋpkgᚋspaceᚋmodelᚐMembership(ctx, field.Selections, res)
}

func (ec *executionContext) _MembershipInfo_endCursor(ctx context.Context, field graphql.CollectedField, obj *model3.MembershipInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MembershipInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MembershipInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *model3.MembershipInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MembershipInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _MembershipInfo_startCursor(ctx context.Context, field graphql.CollectedField, obj *model3.MembershipInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MembershipInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_accessMutation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AccessMutation(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.AccessMutation)
	fc.Result = res
	return ec.marshalNAccessMutation2ᚖbeanᚋpkgᚋaccessᚋmodelᚋdtoᚐAccessMutation(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_applicationMutation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ApplicationMutation(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto1.ApplicationMutation)
	fc.Result = res
	return ec.marshalNApplicationMutation2ᚖbeanᚋpkgᚋappᚋmodelᚋdtoᚐApplicationMutation(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_mailerMutation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MailerMutation(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto2.MailerMutation)
	fc.Result = res
	return ec.marshalNMailerMutation2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerMutation(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_s3Mutation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().S3Mutation(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto3.S3Mutation)
	fc.Result = res
	return ec.marshalNS3Mutation2ᚖbeanᚋpkgᚋintegrationᚋs3ᚋmodelᚋdtoᚐS3Mutation(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_spaceMutation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SpaceMutation(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto4.SpaceMutation)
	fc.Result = res
	return ec.marshalNSpaceMutation2ᚖbeanᚋpkgᚋspaceᚋmodelᚋdtoᚐSpaceMutation(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_userMutation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UserMutation(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto5.UserMutation)
	fc.Result = res
	return ec.marshalNUserMutation2ᚖbeanᚋpkgᚋuserᚋmodelᚋdtoᚐUserMutation(ctx, field.Selections, res)
}

func (ec *executionContext) _Policy_id(ctx context.Context, field graphql.CollectedField, obj *model2.Policy) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Policy",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Policy_createdAt(ctx context.Context, field graphql.CollectedField, obj *model2.Policy) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Policy",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Policy_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model2.Policy) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Policy",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Policy_kind(ctx context.Context, field graphql.CollectedField, obj *model2.Policy) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Policy",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model2.PolicyKind)
	fc.Result = res
	return ec.marshalNPolicyKind2beanᚋpkgᚋintegrationᚋs3ᚋmodelᚐPolicyKind(ctx, field.Selections, res)
}

func (ec *executionContext) _Policy_value(ctx context.Context, field graphql.CollectedField, obj *model2.Policy) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Policy",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_accessQuery(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AccessQuery(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.AccessQuery)
	fc.Result = res
	return ec.marshalNAccessQuery2ᚖbeanᚋpkgᚋaccessᚋmodelᚋdtoᚐAccessQuery(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_applicationQuery(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ApplicationQuery(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto1.ApplicationQuery)
	fc.Result = res
	return ec.marshalNApplicationQuery2ᚖbeanᚋpkgᚋappᚋmodelᚋdtoᚐApplicationQuery(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_mailerQuery(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MailerQuery(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto2.MailerQuery)
	fc.Result = res
	return ec.marshalNMailerQuery2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerQuery(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_spaceQuery(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SpaceQuery(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto4.SpaceQuery)
	fc.Result = res
	return ec.marshalNSpaceQuery2ᚖbeanᚋpkgᚋspaceᚋmodelᚋdtoᚐSpaceQuery(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_userQuery(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UserQuery(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto5.UserQuery)
	fc.Result = res
	return ec.marshalNUserQuery2ᚖbeanᚋpkgᚋuserᚋmodelᚋdtoᚐUserQuery(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _S3Mutation_upload(ctx context.Context, field graphql.CollectedField, obj *dto3.S3Mutation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "S3Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.S3Mutation().Upload(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto3.S3UploadMutation)
	fc.Result = res
	return ec.marshalNS3UploadMutation2ᚖbeanᚋpkgᚋintegrationᚋs3ᚋmodelᚋdtoᚐS3UploadMutation(ctx, field.Selections, res)
}

func (ec *executionContext) _S3UploadMutation_token(ctx context.Context, field graphql.CollectedField, obj *dto3.S3UploadMutation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "S3UploadMutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_S3UploadMutation_token_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.S3UploadMutation().Token(rctx, obj, args["input"].(dto3.S3UploadTokenInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.RequireAuth == nil {
				return nil, errors.New("directive requireAuth is not implemented")
			}
			return ec.directives.RequireAuth(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(map[string]interface{}); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be map[string]interface{}`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalNMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) _Session_id(ctx context.Context, field graphql.CollectedField, obj *model.Session) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Session",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Session_version(ctx context.Context, field graphql.CollectedField, obj *model.Session) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Session",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Session_user(ctx context.Context, field graphql.CollectedField, obj *model.Session) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Session",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Session().User(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model4.User)
	fc.Result = res
	return ec.marshalOUser2ᚖbeanᚋpkgᚋuserᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Session_space(ctx context.Context, field graphql.CollectedField, obj *model.Session) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Session",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Session().Space(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model3.Space)
	fc.Result = res
	return ec.marshalNSpace2ᚖbeanᚋpkgᚋspaceᚋmodelᚐSpace(ctx, field.Selections, res)
}

func (ec *executionContext) _Session_scopes(ctx context.Context, field graphql.CollectedField, obj *model.Session) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Session",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Session().Scopes(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.AccessScope)
	fc.Result = res
	return ec.marshalOAccessScope2ᚕᚖbeanᚋpkgᚋaccessᚋmodelᚐAccessScope(ctx, field.Selections, res)
}

func (ec *executionContext) _Session_context(ctx context.Context, field graphql.CollectedField, obj *model.Session) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Session",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Session().Context(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SessionContext)
	fc.Result = res
	return ec.marshalOSessionContext2ᚖbeanᚋpkgᚋaccessᚋmodelᚐSessionContext(ctx, field.Selections, res)
}

func (ec *executionContext) _Session_isActive(ctx context.Context, field graphql.CollectedField, obj *model.Session) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Session",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Session_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Session) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Session",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Session_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Session) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Session",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Session_expiredAt(ctx context.Context, field graphql.CollectedField, obj *model.Session) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Session",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiredAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Session_jwt(ctx context.Context, field graphql.CollectedField, obj *model.Session) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Session",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Session_jwt_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Session().Jwt(rctx, obj, args["codeVerifier"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNJWT2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SessionArchiveOutcome_errors(ctx context.Context, field graphql.CollectedField, obj *dto.SessionArchiveOutcome) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SessionArchiveOutcome",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Errors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*util.Error)
	fc.Result = res
	return ec.marshalOError2ᚕᚖbeanᚋcomponentsᚋutilᚐErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _SessionArchiveOutcome_result(ctx context.Context, field graphql.CollectedField, obj *dto.SessionArchiveOutcome) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SessionArchiveOutcome",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Result, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _SessionContext_ipAddress(ctx context.Context, field graphql.CollectedField, obj *model.SessionContext) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SessionContext",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOIP2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SessionContext_country(ctx context.Context, field graphql.CollectedField, obj *model.SessionContext) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SessionContext",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOCountryCode2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SessionContext_deviceType(ctx context.Context, field graphql.CollectedField, obj *model.SessionContext) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SessionContext",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeviceType)
	fc.Result = res
	return ec.marshalODeviceType2ᚖbeanᚋpkgᚋaccessᚋmodelᚐDeviceType(ctx, field.Selections, res)
}

func (ec *executionContext) _SessionContext_deviceName(ctx context.Context, field graphql.CollectedField, obj *model.SessionContext) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SessionContext",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SessionCreateOutcome_errors(ctx context.Context, field graphql.CollectedField, obj *dto.SessionCreateOutcome) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SessionCreateOutcome",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Errors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*util.Error)
	fc.Result = res
	return ec.marshalOError2ᚕᚖbeanᚋcomponentsᚋutilᚐErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _SessionCreateOutcome_session(ctx context.Context, field graphql.CollectedField, obj *dto.SessionCreateOutcome) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SessionCreateOutcome",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Session, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Session)
	fc.Result = res
	return ec.marshalOSession2ᚖbeanᚋpkgᚋaccessᚋmodelᚐSession(ctx, field.Selections, res)
}

func (ec *executionContext) _SessionCreateOutcome_token(ctx context.Context, field graphql.CollectedField, obj *dto.SessionCreateOutcome) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SessionCreateOutcome",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Space_id(ctx context.Context, field graphql.CollectedField, obj *model3.Space) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Space",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Space_version(ctx context.Context, field graphql.CollectedField, obj *model3.Space) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Space",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Space_kind(ctx context.Context, field graphql.CollectedField, obj *model3.Space) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Space",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model3.SpaceKind)
	fc.Result = res
	return ec.marshalNSpaceKind2beanᚋpkgᚋspaceᚋmodelᚐSpaceKind(ctx, field.Selections, res)
}

func (ec *executionContext) _Space_title(ctx context.Context, field graphql.CollectedField, obj *model3.Space) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Space",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Space_createdAt(ctx context.Context, field graphql.CollectedField, obj *model3.Space) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Space",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Space_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model3.Space) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Space",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Space_isActive(ctx context.Context, field graphql.CollectedField, obj *model3.Space) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Space",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Space_domainNames(ctx context.Context, field graphql.CollectedField, obj *model3.Space) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Space",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Space().DomainNames(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model3.DomainNames)
	fc.Result = res
	return ec.marshalODomainNames2ᚖbeanᚋpkgᚋspaceᚋmodelᚐDomainNames(ctx, field.Selections, res)
}

func (ec *executionContext) _Space_features(ctx context.Context, field graphql.CollectedField, obj *model3.Space) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Space",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Space().Features(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model3.SpaceFeatures)
	fc.Result = res
	return ec.marshalOSpaceFeatures2ᚖbeanᚋpkgᚋspaceᚋmodelᚐSpaceFeatures(ctx, field.Selections, res)
}

func (ec *executionContext) _Space_language(ctx context.Context, field graphql.CollectedField, obj *model3.Space) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Space",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Language, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(api.Language)
	fc.Result = res
	return ec.marshalNLanguage2beanᚋpkgᚋinfraᚋapiᚐLanguage(ctx, field.Selections, res)
}

func (ec *executionContext) _Space_parent(ctx context.Context, field graphql.CollectedField, obj *model3.Space) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Space",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Space().Parent(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model3.Space)
	fc.Result = res
	return ec.marshalOSpace2ᚖbeanᚋpkgᚋspaceᚋmodelᚐSpace(ctx, field.Selections, res)
}

func (ec *executionContext) _SpaceCreateOutcome_errors(ctx context.Context, field graphql.CollectedField, obj *dto4.SpaceCreateOutcome) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SpaceCreateOutcome",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Errors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]util.Error)
	fc.Result = res
	return ec.marshalOError2ᚕbeanᚋcomponentsᚋutilᚐErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _SpaceCreateOutcome_space(ctx context.Context, field graphql.CollectedField, obj *dto4.SpaceCreateOutcome) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SpaceCreateOutcome",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Space, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model3.Space)
	fc.Result = res
	return ec.marshalOSpace2ᚖbeanᚋpkgᚋspaceᚋmodelᚐSpace(ctx, field.Selections, res)
}

func (ec *executionContext) _SpaceFeatures_register(ctx context.Context, field graphql.CollectedField, obj *model3.SpaceFeatures) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SpaceFeatures",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Register, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _SpaceMembershipCreateOutcome_errors(ctx context.Context, field graphql.CollectedField, obj *dto4.SpaceMembershipCreateOutcome) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SpaceMembershipCreateOutcome",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Errors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*util.Error)
	fc.Result = res
	return ec.marshalOError2ᚕᚖbeanᚋcomponentsᚋutilᚐErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _SpaceMembershipCreateOutcome_membership(ctx context.Context, field graphql.CollectedField, obj *dto4.SpaceMembershipCreateOutcome) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SpaceMembershipCreateOutcome",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Membership, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model3.Membership)
	fc.Result = res
	return ec.marshalOMembership2ᚖbeanᚋpkgᚋspaceᚋmodelᚐMembership(ctx, field.Selections, res)
}

func (ec *executionContext) _SpaceMembershipMutation_create(ctx context.Context, field graphql.CollectedField, obj *dto4.SpaceMembershipMutation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SpaceMembershipMutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_SpaceMembershipMutation_create_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SpaceMembershipMutation().Create(rctx, obj, args["input"].(dto4.SpaceMembershipCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto4.SpaceMembershipCreateOutcome)
	fc.Result = res
	return ec.marshalNSpaceMembershipCreateOutcome2ᚖbeanᚋpkgᚋspaceᚋmodelᚋdtoᚐSpaceMembershipCreateOutcome(ctx, field.Selections, res)
}

func (ec *executionContext) _SpaceMembershipMutation_update(ctx context.Context, field graphql.CollectedField, obj *dto4.SpaceMembershipMutation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SpaceMembershipMutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_SpaceMembershipMutation_update_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SpaceMembershipMutation().Update(rctx, obj, args["input"].(dto4.SpaceMembershipUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto4.SpaceMembershipCreateOutcome)
	fc.Result = res
	return ec.marshalNSpaceMembershipCreateOutcome2ᚖbeanᚋpkgᚋspaceᚋmodelᚋdtoᚐSpaceMembershipCreateOutcome(ctx, field.Selections, res)
}

func (ec *executionContext) _SpaceMembershipQuery_load(ctx context.Context, field graphql.CollectedField, obj *dto4.SpaceMembershipQuery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SpaceMembershipQuery",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_SpaceMembershipQuery_load_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SpaceMembershipQuery().Load(rctx, obj, args["id"].(string), args["version"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model3.Membership)
	fc.Result = res
	return ec.marshalOMembership2ᚖbeanᚋpkgᚋspaceᚋmodelᚐMembership(ctx, field.Selections, res)
}

func (ec *executionContext) _SpaceMembershipQuery_find(ctx context.Context, field graphql.CollectedField, obj *dto4.SpaceMembershipQuery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SpaceMembershipQuery",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_SpaceMembershipQuery_find_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SpaceMembershipQuery().Find(rctx, obj, args["first"].(int), args["after"].(*string), args["filters"].(dto4.MembershipsFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model3.MembershipConnection)
	fc.Result = res
	return ec.marshalNMembershipConnection2ᚖbeanᚋpkgᚋspaceᚋmodelᚐMembershipConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _SpaceMutation_create(ctx context.Context, field graphql.CollectedField, obj *dto4.SpaceMutation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SpaceMutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_SpaceMutation_create_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SpaceMutation().Create(rctx, obj, args["input"].(dto4.SpaceCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto4.SpaceCreateOutcome)
	fc.Result = res
	return ec.marshalNSpaceCreateOutcome2ᚖbeanᚋpkgᚋspaceᚋmodelᚋdtoᚐSpaceCreateOutcome(ctx, field.Selections, res)
}

func (ec *executionContext) _SpaceMutation_update(ctx context.Context, field graphql.CollectedField, obj *dto4.SpaceMutation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SpaceMutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_SpaceMutation_update_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SpaceMutation().Update(rctx, obj, args["input"].(dto4.SpaceUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto4.SpaceCreateOutcome)
	fc.Result = res
	return ec.marshalNSpaceCreateOutcome2ᚖbeanᚋpkgᚋspaceᚋmodelᚋdtoᚐSpaceCreateOutcome(ctx, field.Selections, res)
}

func (ec *executionContext) _SpaceMutation_membership(ctx context.Context, field graphql.CollectedField, obj *dto4.SpaceMutation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SpaceMutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SpaceMutation().Membership(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto4.SpaceMembershipMutation)
	fc.Result = res
	return ec.marshalNSpaceMembershipMutation2ᚖbeanᚋpkgᚋspaceᚋmodelᚋdtoᚐSpaceMembershipMutation(ctx, field.Selections, res)
}

func (ec *executionContext) _SpaceQuery_findOne(ctx context.Context, field graphql.CollectedField, obj *dto4.SpaceQuery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SpaceQuery",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_SpaceQuery_findOne_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SpaceQuery().FindOne(rctx, obj, args["filters"].(dto4.SpaceFilters))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model3.Space)
	fc.Result = res
	return ec.marshalOSpace2ᚖbeanᚋpkgᚋspaceᚋmodelᚐSpace(ctx, field.Selections, res)
}

func (ec *executionContext) _SpaceQuery_membership(ctx context.Context, field graphql.CollectedField, obj *dto4.SpaceQuery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SpaceQuery",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SpaceQuery().Membership(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto4.SpaceMembershipQuery)
	fc.Result = res
	return ec.marshalNSpaceMembershipQuery2ᚖbeanᚋpkgᚋspaceᚋmodelᚋdtoᚐSpaceMembershipQuery(ctx, field.Selections, res)
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *model4.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_version(ctx context.Context, field graphql.CollectedField, obj *model4.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_name(ctx context.Context, field graphql.CollectedField, obj *model4.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().Name(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model4.UserName)
	fc.Result = res
	return ec.marshalNUserName2ᚖbeanᚋpkgᚋuserᚋmodelᚐUserName(ctx, field.Selections, res)
}

func (ec *executionContext) _User_emails(ctx context.Context, field graphql.CollectedField, obj *model4.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().Emails(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model4.UserEmails)
	fc.Result = res
	return ec.marshalOUserEmails2ᚖbeanᚋpkgᚋuserᚋmodelᚐUserEmails(ctx, field.Selections, res)
}

func (ec *executionContext) _User_avatarUri(ctx context.Context, field graphql.CollectedField, obj *model4.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AvatarURI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalar.Uri)
	fc.Result = res
	return ec.marshalOUri2ᚖbeanᚋcomponentsᚋscalarᚐUri(ctx, field.Selections, res)
}

func (ec *executionContext) _User_isActive(ctx context.Context, field graphql.CollectedField, obj *model4.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _User_createdAt(ctx context.Context, field graphql.CollectedField, obj *model4.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _User_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model4.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _User_language(ctx context.Context, field graphql.CollectedField, obj *model4.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Language, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(api.Language)
	fc.Result = res
	return ec.marshalNLanguage2beanᚋpkgᚋinfraᚋapiᚐLanguage(ctx, field.Selections, res)
}

func (ec *executionContext) _UserEmail_id(ctx context.Context, field graphql.CollectedField, obj *model4.UserEmail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserEmail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserEmail_verified(ctx context.Context, field graphql.CollectedField, obj *model4.UserEmail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserEmail",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.UserEmail().Verified(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _UserEmail_value(ctx context.Context, field graphql.CollectedField, obj *model4.UserEmail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserEmail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(scalar.EmailAddress)
	fc.Result = res
	return ec.marshalNEmailAddress2beanᚋcomponentsᚋscalarᚐEmailAddress(ctx, field.Selections, res)
}

func (ec *executionContext) _UserEmail_createdAt(ctx context.Context, field graphql.CollectedField, obj *model4.UserEmail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserEmail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _UserEmail_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model4.UserEmail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserEmail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _UserEmail_isActive(ctx context.Context, field graphql.CollectedField, obj *model4.UserEmail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserEmail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _UserEmails_primary(ctx context.Context, field graphql.CollectedField, obj *model4.UserEmails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserEmails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Primary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model4.UserEmail)
	fc.Result = res
	return ec.marshalOUserEmail2ᚖbeanᚋpkgᚋuserᚋmodelᚐUserEmail(ctx, field.Selections, res)
}

func (ec *executionContext) _UserEmails_secondary(ctx context.Context, field graphql.CollectedField, obj *model4.UserEmails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserEmails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Secondary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model4.UserEmail)
	fc.Result = res
	return ec.marshalOUserEmail2ᚕᚖbeanᚋpkgᚋuserᚋmodelᚐUserEmail(ctx, field.Selections, res)
}

func (ec *executionContext) _UserMutation_create(ctx context.Context, field graphql.CollectedField, obj *dto5.UserMutation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserMutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_UserMutation_create_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.UserMutation().Create(rctx, obj, args["input"].(*dto5.UserCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto5.UserMutationOutcome)
	fc.Result = res
	return ec.marshalNUserMutationOutcome2ᚖbeanᚋpkgᚋuserᚋmodelᚋdtoᚐUserMutationOutcome(ctx, field.Selections, res)
}

func (ec *executionContext) _UserMutation_update(ctx context.Context, field graphql.CollectedField, obj *dto5.UserMutation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserMutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_UserMutation_update_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.UserMutation().Update(rctx, obj, args["input"].(dto5.UserUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto5.UserMutationOutcome)
	fc.Result = res
	return ec.marshalNUserMutationOutcome2ᚖbeanᚋpkgᚋuserᚋmodelᚋdtoᚐUserMutationOutcome(ctx, field.Selections, res)
}

func (ec *executionContext) _UserMutationOutcome_user(ctx context.Context, field graphql.CollectedField, obj *dto5.UserMutationOutcome) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserMutationOutcome",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model4.User)
	fc.Result = res
	return ec.marshalOUser2ᚖbeanᚋpkgᚋuserᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _UserMutationOutcome_errors(ctx context.Context, field graphql.CollectedField, obj *dto5.UserMutationOutcome) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserMutationOutcome",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Errors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*util.Error)
	fc.Result = res
	return ec.marshalOError2ᚕᚖbeanᚋcomponentsᚋutilᚐErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _UserName_firstName(ctx context.Context, field graphql.CollectedField, obj *model4.UserName) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserName",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UserName_lastName(ctx context.Context, field graphql.CollectedField, obj *model4.UserName) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserName",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UserName_preferredName(ctx context.Context, field graphql.CollectedField, obj *model4.UserName) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserName",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreferredName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UserQuery_load(ctx context.Context, field graphql.CollectedField, obj *dto5.UserQuery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserQuery",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_UserQuery_load_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.UserQuery().Load(rctx, obj, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model4.User)
	fc.Result = res
	return ec.marshalOUser2ᚖbeanᚋpkgᚋuserᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputApplicationCreateInput(ctx context.Context, obj interface{}) (dto1.ApplicationCreateInput, error) {
	var it dto1.ApplicationCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "isActive":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isActive"))
			it.IsActive, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputApplicationUpdateInput(ctx context.Context, obj interface{}) (dto1.ApplicationUpdateInput, error) {
	var it dto1.ApplicationUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.Id, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			it.Version, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "isActive":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isActive"))
			it.IsActive, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDomainNameInput(ctx context.Context, obj interface{}) (dto4.DomainNameInput, error) {
	var it dto4.DomainNameInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "verified":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("verified"))
			it.Verified, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isActive":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isActive"))
			it.IsActive, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDomainNamesInput(ctx context.Context, obj interface{}) (dto4.DomainNamesInput, error) {
	var it dto4.DomainNamesInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "primary":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("primary"))
			it.Primary, err = ec.unmarshalNDomainNameInput2ᚖbeanᚋpkgᚋspaceᚋmodelᚋdtoᚐDomainNameInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "secondary":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("secondary"))
			it.Secondary, err = ec.unmarshalODomainNameInput2ᚕᚖbeanᚋpkgᚋspaceᚋmodelᚋdtoᚐDomainNameInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMailerAccountAttachmentInput(ctx context.Context, obj interface{}) (dto2.MailerAccountAttachmentInput, error) {
	var it dto2.MailerAccountAttachmentInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "sizeLimit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeLimit"))
			it.SizeLimit, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "sizeLimitEach":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeLimitEach"))
			it.SizeLimitEach, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "fileTypes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fileTypes"))
			it.FileTypes, err = ec.unmarshalNFileType2ᚕbeanᚋpkgᚋinfraᚋapiᚐFileTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMailerAccountCreateInput(ctx context.Context, obj interface{}) (dto2.MailerAccountCreateInput, error) {
	var it dto2.MailerAccountCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "spaceId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spaceId"))
			it.SpaceID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "isActive":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isActive"))
			it.IsActive, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "sender":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sender"))
			it.Sender, err = ec.unmarshalNMailerAccountSenderInput2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccountSenderInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "connectionUrl":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connectionUrl"))
			it.ConnectionURL, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "attachment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attachment"))
			it.Attachment, err = ec.unmarshalOMailerAccountAttachmentInput2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccountAttachmentInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMailerAccountSenderInput(ctx context.Context, obj interface{}) (dto2.MailerAccountSenderInput, error) {
	var it dto2.MailerAccountSenderInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalNEmailAddress2beanᚋcomponentsᚋscalarᚐEmailAddress(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMailerAccountUpdateAttachmentInput(ctx context.Context, obj interface{}) (dto2.MailerAccountUpdateAttachmentInput, error) {
	var it dto2.MailerAccountUpdateAttachmentInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "sizeLimit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeLimit"))
			it.SizeLimit, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "sizeLimitEach":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeLimitEach"))
			it.SizeLimitEach, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "fileTypes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fileTypes"))
			it.FileTypes, err = ec.unmarshalOFileType2ᚕbeanᚋpkgᚋinfraᚋapiᚐFileTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMailerAccountUpdateInput(ctx context.Context, obj interface{}) (dto2.MailerAccountUpdateInput, error) {
	var it dto2.MailerAccountUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			it.Version, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "values":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("values"))
			it.Values, err = ec.unmarshalNMailerAccountUpdateValueInput2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccountUpdateValueInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMailerAccountUpdateSenderInput(ctx context.Context, obj interface{}) (dto2.MailerAccountUpdateSenderInput, error) {
	var it dto2.MailerAccountUpdateSenderInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				maxLength, err := ec.unmarshalOInt2ᚖint(ctx, 128)
				if err != nil {
					return nil, err
				}
				minLength, err := ec.unmarshalOInt2ᚖint(ctx, 7)
				if err != nil {
					return nil, err
				}
				if ec.directives.Constraint == nil {
					return nil, errors.New("directive constraint is not implemented")
				}
				return ec.directives.Constraint(ctx, obj, directive0, maxLength, minLength)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Name = data
			} else if tmp == nil {
				it.Name = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOEmailAddress2ᚖbeanᚋcomponentsᚋscalarᚐEmailAddress(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				value, err := ec.unmarshalOString2ᚖstring(ctx, "Can only change when account is not verified.")
				if err != nil {
					return nil, err
				}
				if ec.directives.Comment == nil {
					return nil, errors.New("directive comment is not implemented")
				}
				return ec.directives.Comment(ctx, obj, directive0, value, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*scalar.EmailAddress); ok {
				it.Email = data
			} else if tmp == nil {
				it.Email = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bean/components/scalar.EmailAddress`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMailerAccountUpdateValueInput(ctx context.Context, obj interface{}) (dto2.MailerAccountUpdateValueInput, error) {
	var it dto2.MailerAccountUpdateValueInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOMailerAccountStatus2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccountStatus(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				values, err := ec.unmarshalOString2ᚕstringᚄ(ctx, []interface{}{"Can not change to ACTIVE_VERIFIED   using this mutation.", "Can not change to INACTIVE_VERIFIED using this mutation unless from ACTIVE_VERIFIED."})
				if err != nil {
					return nil, err
				}
				if ec.directives.Comment == nil {
					return nil, errors.New("directive comment is not implemented")
				}
				return ec.directives.Comment(ctx, obj, directive0, nil, values)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*dto2.MailerAccountStatus); ok {
				it.Status = data
			} else if tmp == nil {
				it.Status = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *bean/pkg/integration/mailer/model/dto.MailerAccountStatus`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "connectionUrl":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connectionUrl"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				value, err := ec.unmarshalOString2ᚖstring(ctx, "Account will become unverified if this value is provided.")
				if err != nil {
					return nil, err
				}
				if ec.directives.Comment == nil {
					return nil, errors.New("directive comment is not implemented")
				}
				return ec.directives.Comment(ctx, obj, directive0, value, nil)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.ConnectionURL = data
			} else if tmp == nil {
				it.ConnectionURL = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "sender":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sender"))
			it.Sender, err = ec.unmarshalOMailerAccountUpdateSenderInput2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccountUpdateSenderInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "attachment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attachment"))
			it.Attachment, err = ec.unmarshalOMailerAccountUpdateSenderInput2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccountUpdateSenderInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMembershipsFilter(ctx context.Context, obj interface{}) (dto4.MembershipsFilter, error) {
	var it dto4.MembershipsFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "space":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("space"))
			it.Space, err = ec.unmarshalOMembershipsFilterSpace2ᚖbeanᚋpkgᚋspaceᚋmodelᚋdtoᚐMembershipsFilterSpace(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			it.UserID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "isActive":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isActive"))
			it.IsActive, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "managerId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managerId"))
			it.ManagerId, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMembershipsFilterSpace(ctx context.Context, obj interface{}) (dto4.MembershipsFilterSpace, error) {
	var it dto4.MembershipsFilterSpace
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainName"))
			it.DomainName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputS3ApplicationCredentialsCreateInput(ctx context.Context, obj interface{}) (dto3.S3ApplicationCredentialsCreateInput, error) {
	var it dto3.S3ApplicationCredentialsCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "endpoint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endpoint"))
			it.Endpoint, err = ec.unmarshalNUri2beanᚋcomponentsᚋscalarᚐUri(ctx, v)
			if err != nil {
				return it, err
			}
		case "bucket":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bucket"))
			it.Bucket, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "isSecure":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isSecure"))
			it.IsSecure, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "accessKey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accessKey"))
			it.AccessKey, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "secretKey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("secretKey"))
			it.SecretKey, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputS3ApplicationCredentialsUpdateInput(ctx context.Context, obj interface{}) (dto3.S3ApplicationCredentialsUpdateInput, error) {
	var it dto3.S3ApplicationCredentialsUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "endpoint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endpoint"))
			it.Endpoint, err = ec.unmarshalOUri2ᚖbeanᚋcomponentsᚋscalarᚐUri(ctx, v)
			if err != nil {
				return it, err
			}
		case "bucket":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bucket"))
			it.Bucket, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isSecure":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isSecure"))
			it.IsSecure, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "accessKey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accessKey"))
			it.AccessKey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "secretKey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("secretKey"))
			it.SecretKey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputS3ApplicationPolicyCreateInput(ctx context.Context, obj interface{}) (dto3.S3ApplicationPolicyCreateInput, error) {
	var it dto3.S3ApplicationPolicyCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "kind":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kind"))
			it.Kind, err = ec.unmarshalNPolicyKind2beanᚋpkgᚋintegrationᚋs3ᚋmodelᚐPolicyKind(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputS3ApplicationPolicyDeleteInput(ctx context.Context, obj interface{}) (dto3.S3ApplicationPolicyDeleteInput, error) {
	var it dto3.S3ApplicationPolicyDeleteInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.Id, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputS3ApplicationPolicyMutationInput(ctx context.Context, obj interface{}) (dto3.S3ApplicationPolicyMutationInput, error) {
	var it dto3.S3ApplicationPolicyMutationInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create"))
			it.Create, err = ec.unmarshalOS3ApplicationPolicyCreateInput2ᚕbeanᚋpkgᚋintegrationᚋs3ᚋmodelᚋdtoᚐS3ApplicationPolicyCreateInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "update":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update"))
			it.Update, err = ec.unmarshalOS3ApplicationPolicyUpdateInput2ᚕbeanᚋpkgᚋintegrationᚋs3ᚋmodelᚋdtoᚐS3ApplicationPolicyUpdateInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete"))
			it.Delete, err = ec.unmarshalOS3ApplicationPolicyDeleteInput2ᚕbeanᚋpkgᚋintegrationᚋs3ᚋmodelᚋdtoᚐS3ApplicationPolicyDeleteInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputS3ApplicationPolicyUpdateInput(ctx context.Context, obj interface{}) (dto3.S3ApplicationPolicyUpdateInput, error) {
	var it dto3.S3ApplicationPolicyUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.Id, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputS3ApplicationUpdateInput(ctx context.Context, obj interface{}) (dto3.S3ApplicationUpdateInput, error) {
	var it dto3.S3ApplicationUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.Id, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			it.Version, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "isActive":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isActive"))
			it.IsActive, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "credentials":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("credentials"))
			it.Credentials, err = ec.unmarshalOS3ApplicationCredentialsUpdateInput2ᚖbeanᚋpkgᚋintegrationᚋs3ᚋmodelᚋdtoᚐS3ApplicationCredentialsUpdateInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "policies":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("policies"))
			it.Policies, err = ec.unmarshalOS3ApplicationPolicyMutationInput2ᚖbeanᚋpkgᚋintegrationᚋs3ᚋmodelᚋdtoᚐS3ApplicationPolicyMutationInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputS3UploadTokenInput(ctx context.Context, obj interface{}) (dto3.S3UploadTokenInput, error) {
	var it dto3.S3UploadTokenInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "applicationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("applicationId"))
			it.ApplicationId, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "filePath":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filePath"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalNUri2beanᚋcomponentsᚋscalarᚐUri(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				maxLength, err := ec.unmarshalOInt2ᚖint(ctx, 128)
				if err != nil {
					return nil, err
				}
				minLength, err := ec.unmarshalOInt2ᚖint(ctx, 7)
				if err != nil {
					return nil, err
				}
				if ec.directives.Constraint == nil {
					return nil, errors.New("directive constraint is not implemented")
				}
				return ec.directives.Constraint(ctx, obj, directive0, maxLength, minLength)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(scalar.Uri); ok {
				it.FilePath = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be bean/components/scalar.Uri`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "contentType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentType"))
			it.ContentType, err = ec.unmarshalNContentType2beanᚋcomponentsᚋscalarᚐContentType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSessionCreateContextInput(ctx context.Context, obj interface{}) (dto.SessionCreateContextInput, error) {
	var it dto.SessionCreateContextInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "ipAddress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipAddress"))
			it.IPAddress, err = ec.unmarshalOIP2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "country":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			it.Country, err = ec.unmarshalOCountryCode2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deviceType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deviceType"))
			it.DeviceType, err = ec.unmarshalODeviceType2ᚖbeanᚋpkgᚋaccessᚋmodelᚐDeviceType(ctx, v)
			if err != nil {
				return it, err
			}
		case "deviceName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deviceName"))
			it.DeviceName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSessionCreateGenerateOTLT(ctx context.Context, obj interface{}) (dto.SessionCreateGenerateOTLT, error) {
	var it dto.SessionCreateGenerateOTLT
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "spaceId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spaceId"))
			it.SpaceID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			it.UserID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSessionCreateInput(ctx context.Context, obj interface{}) (dto.SessionCreateInput, error) {
	var it dto.SessionCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "useCredentials":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("useCredentials"))
			it.UseCredentials, err = ec.unmarshalOSessionCreateUseCredentialsInput2ᚖbeanᚋpkgᚋaccessᚋmodelᚋdtoᚐSessionCreateUseCredentialsInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "generateOTLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("generateOTLT"))
			it.GenerateOTLT, err = ec.unmarshalOSessionCreateGenerateOTLT2ᚖbeanᚋpkgᚋaccessᚋmodelᚋdtoᚐSessionCreateGenerateOTLT(ctx, v)
			if err != nil {
				return it, err
			}
		case "useOTLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("useOTLT"))
			it.UseOTLT, err = ec.unmarshalOSessionCreateUseOTLT2ᚖbeanᚋpkgᚋaccessᚋmodelᚋdtoᚐSessionCreateUseOTLT(ctx, v)
			if err != nil {
				return it, err
			}
		case "context":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("context"))
			it.Context, err = ec.unmarshalOSessionCreateContextInput2ᚖbeanᚋpkgᚋaccessᚋmodelᚋdtoᚐSessionCreateContextInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSessionCreateUseCredentialsInput(ctx context.Context, obj interface{}) (dto.SessionCreateUseCredentialsInput, error) {
	var it dto.SessionCreateUseCredentialsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "spaceId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spaceId"))
			it.SpaceID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalNEmailAddress2beanᚋcomponentsᚋscalarᚐEmailAddress(ctx, v)
			if err != nil {
				return it, err
			}
		case "hashedPassword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hashedPassword"))
			it.HashedPassword, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "codeChallengeMethod":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeChallengeMethod"))
			it.CodeChallengeMethod, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "codeChallenge":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeChallenge"))
			it.CodeChallenge, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSessionCreateUseOTLT(ctx context.Context, obj interface{}) (dto.SessionCreateUseOTLT, error) {
	var it dto.SessionCreateUseOTLT
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "token":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
			it.Token, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "codeChallengeMethod":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeChallengeMethod"))
			it.CodeChallengeMethod, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "codeChallenge":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("codeChallenge"))
			it.CodeChallenge, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSpaceCreateInput(ctx context.Context, obj interface{}) (dto4.SpaceCreateInput, error) {
	var it dto4.SpaceCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "object":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
			it.Object, err = ec.unmarshalNSpaceCreateInputObject2beanᚋpkgᚋspaceᚋmodelᚋdtoᚐSpaceCreateInputObject(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSpaceCreateInputObject(ctx context.Context, obj interface{}) (dto4.SpaceCreateInputObject, error) {
	var it dto4.SpaceCreateInputObject
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "kind":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kind"))
			it.Kind, err = ec.unmarshalNSpaceKind2beanᚋpkgᚋspaceᚋmodelᚐSpaceKind(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "language":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("language"))
			it.Language, err = ec.unmarshalNLanguage2beanᚋpkgᚋinfraᚋapiᚐLanguage(ctx, v)
			if err != nil {
				return it, err
			}
		case "isActive":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isActive"))
			it.IsActive, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "domainNames":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domainNames"))
			it.DomainNames, err = ec.unmarshalODomainNamesInput2ᚖbeanᚋpkgᚋspaceᚋmodelᚋdtoᚐDomainNamesInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "features":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("features"))
			it.Features, err = ec.unmarshalNSpaceFeaturesInput2beanᚋpkgᚋspaceᚋmodelᚋdtoᚐSpaceFeaturesInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSpaceFeaturesInput(ctx context.Context, obj interface{}) (dto4.SpaceFeaturesInput, error) {
	var it dto4.SpaceFeaturesInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "register":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("register"))
			it.Register, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSpaceFilters(ctx context.Context, obj interface{}) (dto4.SpaceFilters, error) {
	var it dto4.SpaceFilters
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "domain":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domain"))
			it.Domain, err = ec.unmarshalOUri2ᚖbeanᚋcomponentsᚋscalarᚐUri(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSpaceMembershipCreateInput(ctx context.Context, obj interface{}) (dto4.SpaceMembershipCreateInput, error) {
	var it dto4.SpaceMembershipCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "spaceId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spaceId"))
			it.SpaceID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			it.UserID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "isActive":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isActive"))
			it.IsActive, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "managerMemberIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managerMemberIds"))
			it.ManagerMemberIds, err = ec.unmarshalNID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSpaceMembershipUpdateInput(ctx context.Context, obj interface{}) (dto4.SpaceMembershipUpdateInput, error) {
	var it dto4.SpaceMembershipUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.Id, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			it.Version, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Language":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Language"))
			it.Language, err = ec.unmarshalOLanguage2ᚖbeanᚋpkgᚋinfraᚋapiᚐLanguage(ctx, v)
			if err != nil {
				return it, err
			}
		case "isActive":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isActive"))
			it.IsActive, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSpaceUpdateInput(ctx context.Context, obj interface{}) (dto4.SpaceUpdateInput, error) {
	var it dto4.SpaceUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "spaceId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spaceId"))
			it.SpaceID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "spaceVersion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spaceVersion"))
			it.SpaceVersion, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "object":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
			it.Object, err = ec.unmarshalOSpaceUpdateInputObject2ᚖbeanᚋpkgᚋspaceᚋmodelᚋdtoᚐSpaceUpdateInputObject(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSpaceUpdateInputFeatures(ctx context.Context, obj interface{}) (dto4.SpaceUpdateInputFeatures, error) {
	var it dto4.SpaceUpdateInputFeatures
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "register":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("register"))
			it.Register, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSpaceUpdateInputObject(ctx context.Context, obj interface{}) (dto4.SpaceUpdateInputObject, error) {
	var it dto4.SpaceUpdateInputObject
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "features":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("features"))
			it.Features, err = ec.unmarshalOSpaceUpdateInputFeatures2ᚖbeanᚋpkgᚋspaceᚋmodelᚋdtoᚐSpaceUpdateInputFeatures(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserCreateInput(ctx context.Context, obj interface{}) (dto5.UserCreateInput, error) {
	var it dto5.UserCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNUserNameInput2ᚖbeanᚋpkgᚋuserᚋmodelᚋdtoᚐUserNameInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "emails":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emails"))
			it.Emails, err = ec.unmarshalOUserEmailsInput2ᚖbeanᚋpkgᚋuserᚋmodelᚋdtoᚐUserEmailsInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalNUserPasswordInput2ᚖbeanᚋpkgᚋuserᚋmodelᚋdtoᚐUserPasswordInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "avatarUri":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarUri"))
			it.AvatarURI, err = ec.unmarshalOUri2ᚖbeanᚋcomponentsᚋscalarᚐUri(ctx, v)
			if err != nil {
				return it, err
			}
		case "isActive":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isActive"))
			it.IsActive, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserEmailInput(ctx context.Context, obj interface{}) (dto5.UserEmailInput, error) {
	var it dto5.UserEmailInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "verified":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("verified"))
			it.Verified, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalNEmailAddress2beanᚋcomponentsᚋscalarᚐEmailAddress(ctx, v)
			if err != nil {
				return it, err
			}
		case "isActive":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isActive"))
			it.IsActive, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserEmailsInput(ctx context.Context, obj interface{}) (dto5.UserEmailsInput, error) {
	var it dto5.UserEmailsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "primary":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("primary"))
			it.Primary, err = ec.unmarshalNUserEmailInput2ᚖbeanᚋpkgᚋuserᚋmodelᚋdtoᚐUserEmailInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "secondary":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("secondary"))
			it.Secondary, err = ec.unmarshalOUserEmailInput2ᚕᚖbeanᚋpkgᚋuserᚋmodelᚋdtoᚐUserEmailInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserNameInput(ctx context.Context, obj interface{}) (dto5.UserNameInput, error) {
	var it dto5.UserNameInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "firstName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			it.FirstName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			it.LastName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "preferredName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("preferredName"))
			it.PreferredName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserPasswordInput(ctx context.Context, obj interface{}) (dto5.UserPasswordInput, error) {
	var it dto5.UserPasswordInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "hashedValue":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hashedValue"))
			it.HashedValue, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserUpdateInput(ctx context.Context, obj interface{}) (dto5.UserUpdateInput, error) {
	var it dto5.UserUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			it.Version, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "values":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("values"))
			it.Values, err = ec.unmarshalOUserUpdateValuesInput2ᚖbeanᚋpkgᚋuserᚋmodelᚋdtoᚐUserUpdateValuesInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserUpdateValuesInput(ctx context.Context, obj interface{}) (dto5.UserUpdateValuesInput, error) {
	var it dto5.UserUpdateValuesInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalNUserPasswordInput2ᚖbeanᚋpkgᚋuserᚋmodelᚋdtoᚐUserPasswordInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var accessMutationImplementors = []string{"AccessMutation"}

func (ec *executionContext) _AccessMutation(ctx context.Context, sel ast.SelectionSet, obj *dto.AccessMutation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accessMutationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccessMutation")
		case "session":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AccessMutation_session(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var accessQueryImplementors = []string{"AccessQuery"}

func (ec *executionContext) _AccessQuery(ctx context.Context, sel ast.SelectionSet, obj *dto.AccessQuery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accessQueryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccessQuery")
		case "session":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AccessQuery_session(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var accessSessionMutationImplementors = []string{"AccessSessionMutation"}

func (ec *executionContext) _AccessSessionMutation(ctx context.Context, sel ast.SelectionSet, obj *dto.AccessSessionMutation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accessSessionMutationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccessSessionMutation")
		case "create":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AccessSessionMutation_create(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "archive":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AccessSessionMutation_archive(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var accessSessionQueryImplementors = []string{"AccessSessionQuery"}

func (ec *executionContext) _AccessSessionQuery(ctx context.Context, sel ast.SelectionSet, obj *dto.AccessSessionQuery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accessSessionQueryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccessSessionQuery")
		case "load":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AccessSessionQuery_load(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var applicationImplementors = []string{"Application"}

func (ec *executionContext) _Application(ctx context.Context, sel ast.SelectionSet, obj *model1.Application) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, applicationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Application")
		case "id":
			out.Values[i] = ec._Application_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "version":
			out.Values[i] = ec._Application_version(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "isActive":
			out.Values[i] = ec._Application_isActive(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Application_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Application_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "deletedAt":
			out.Values[i] = ec._Application_deletedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "polices":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Application_polices(ctx, field, obj)
				return res
			})
		case "credentials":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Application_credentials(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var applicationMutationImplementors = []string{"ApplicationMutation"}

func (ec *executionContext) _ApplicationMutation(ctx context.Context, sel ast.SelectionSet, obj *dto1.ApplicationMutation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, applicationMutationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApplicationMutation")
		case "create":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ApplicationMutation_create(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "update":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ApplicationMutation_update(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var applicationOutcomeImplementors = []string{"ApplicationOutcome"}

func (ec *executionContext) _ApplicationOutcome(ctx context.Context, sel ast.SelectionSet, obj *dto1.ApplicationOutcome) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, applicationOutcomeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApplicationOutcome")
		case "errors":
			out.Values[i] = ec._ApplicationOutcome_errors(ctx, field, obj)
		case "app":
			out.Values[i] = ec._ApplicationOutcome_app(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var applicationQueryImplementors = []string{"ApplicationQuery"}

func (ec *executionContext) _ApplicationQuery(ctx context.Context, sel ast.SelectionSet, obj *dto1.ApplicationQuery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, applicationQueryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApplicationQuery")
		case "load":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ApplicationQuery_load(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var configBucketImplementors = []string{"ConfigBucket"}

func (ec *executionContext) _ConfigBucket(ctx context.Context, sel ast.SelectionSet, obj *model5.ConfigBucket) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configBucketImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigBucket")
		case "id":
			out.Values[i] = ec._ConfigBucket_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "version":
			out.Values[i] = ec._ConfigBucket_version(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "slug":
			out.Values[i] = ec._ConfigBucket_slug(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			out.Values[i] = ec._ConfigBucket_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._ConfigBucket_description(ctx, field, obj)
		case "hostId":
			out.Values[i] = ec._ConfigBucket_hostId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "access":
			out.Values[i] = ec._ConfigBucket_access(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isPublished":
			out.Values[i] = ec._ConfigBucket_isPublished(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._ConfigBucket_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._ConfigBucket_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var configVariableImplementors = []string{"ConfigVariable"}

func (ec *executionContext) _ConfigVariable(ctx context.Context, sel ast.SelectionSet, obj *model5.ConfigVariable) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configVariableImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigVariable")
		case "id":
			out.Values[i] = ec._ConfigVariable_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "version":
			out.Values[i] = ec._ConfigVariable_version(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bucketId":
			out.Values[i] = ec._ConfigVariable_bucketId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._ConfigVariable_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._ConfigVariable_description(ctx, field, obj)
		case "value":
			out.Values[i] = ec._ConfigVariable_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._ConfigVariable_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._ConfigVariable_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isLocked":
			out.Values[i] = ec._ConfigVariable_isLocked(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var credentialsImplementors = []string{"Credentials"}

func (ec *executionContext) _Credentials(ctx context.Context, sel ast.SelectionSet, obj *model2.Credentials) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, credentialsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Credentials")
		case "id":
			out.Values[i] = ec._Credentials_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "endpoint":
			out.Values[i] = ec._Credentials_endpoint(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bucket":
			out.Values[i] = ec._Credentials_bucket(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isSecure":
			out.Values[i] = ec._Credentials_isSecure(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "accesskey":
			out.Values[i] = ec._Credentials_accesskey(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var domainNameImplementors = []string{"DomainName"}

func (ec *executionContext) _DomainName(ctx context.Context, sel ast.SelectionSet, obj *model3.DomainName) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, domainNameImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DomainName")
		case "id":
			out.Values[i] = ec._DomainName_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "value":
			out.Values[i] = ec._DomainName_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._DomainName_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._DomainName_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isActive":
			out.Values[i] = ec._DomainName_isActive(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isVerified":
			out.Values[i] = ec._DomainName_isVerified(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var domainNamesImplementors = []string{"DomainNames"}

func (ec *executionContext) _DomainNames(ctx context.Context, sel ast.SelectionSet, obj *model3.DomainNames) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, domainNamesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DomainNames")
		case "primary":
			out.Values[i] = ec._DomainNames_primary(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "secondary":
			out.Values[i] = ec._DomainNames_secondary(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var errorImplementors = []string{"Error"}

func (ec *executionContext) _Error(ctx context.Context, sel ast.SelectionSet, obj *util.Error) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, errorImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Error")
		case "code":
			out.Values[i] = ec._Error_code(ctx, field, obj)
		case "fields":
			out.Values[i] = ec._Error_fields(ctx, field, obj)
		case "message":
			out.Values[i] = ec._Error_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mailerAccountImplementors = []string{"MailerAccount"}

func (ec *executionContext) _MailerAccount(ctx context.Context, sel ast.SelectionSet, obj *dto2.MailerAccount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mailerAccountImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MailerAccount")
		case "id":
			out.Values[i] = ec._MailerAccount_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "version":
			out.Values[i] = ec._MailerAccount_version(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "space":
			out.Values[i] = ec._MailerAccount_space(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._MailerAccount_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._MailerAccount_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._MailerAccount_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._MailerAccount_deletedAt(ctx, field, obj)
		case "sender":
			out.Values[i] = ec._MailerAccount_sender(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "connectionUrl":
			out.Values[i] = ec._MailerAccount_connectionUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "attachment":
			out.Values[i] = ec._MailerAccount_attachment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mailerAccountAttachmentImplementors = []string{"MailerAccountAttachment"}

func (ec *executionContext) _MailerAccountAttachment(ctx context.Context, sel ast.SelectionSet, obj *dto2.MailerAccountAttachment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mailerAccountAttachmentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MailerAccountAttachment")
		case "sizeLimit":
			out.Values[i] = ec._MailerAccountAttachment_sizeLimit(ctx, field, obj)
		case "sizeLimitEach":
			out.Values[i] = ec._MailerAccountAttachment_sizeLimitEach(ctx, field, obj)
		case "fileTypes":
			out.Values[i] = ec._MailerAccountAttachment_fileTypes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mailerAccountConnectionImplementors = []string{"MailerAccountConnection"}

func (ec *executionContext) _MailerAccountConnection(ctx context.Context, sel ast.SelectionSet, obj *dto2.MailerAccountConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mailerAccountConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MailerAccountConnection")
		case "pageInfo":
			out.Values[i] = ec._MailerAccountConnection_pageInfo(ctx, field, obj)
		case "edges":
			out.Values[i] = ec._MailerAccountConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mailerAccountEdgeImplementors = []string{"MailerAccountEdge"}

func (ec *executionContext) _MailerAccountEdge(ctx context.Context, sel ast.SelectionSet, obj *dto2.MailerAccountEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mailerAccountEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MailerAccountEdge")
		case "cursor":
			out.Values[i] = ec._MailerAccountEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._MailerAccountEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mailerAccountMutationImplementors = []string{"MailerAccountMutation"}

func (ec *executionContext) _MailerAccountMutation(ctx context.Context, sel ast.SelectionSet, obj *dto2.MailerAccountMutation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mailerAccountMutationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MailerAccountMutation")
		case "create":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MailerAccountMutation_create(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "update":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MailerAccountMutation_update(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "verify":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MailerAccountMutation_verify(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mailerAccountMutationOutcomeImplementors = []string{"MailerAccountMutationOutcome"}

func (ec *executionContext) _MailerAccountMutationOutcome(ctx context.Context, sel ast.SelectionSet, obj *dto2.MailerAccountMutationOutcome) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mailerAccountMutationOutcomeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MailerAccountMutationOutcome")
		case "account":
			out.Values[i] = ec._MailerAccountMutationOutcome_account(ctx, field, obj)
		case "errors":
			out.Values[i] = ec._MailerAccountMutationOutcome_errors(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mailerAccountPageInfoImplementors = []string{"MailerAccountPageInfo"}

func (ec *executionContext) _MailerAccountPageInfo(ctx context.Context, sel ast.SelectionSet, obj *dto2.MailerAccountPageInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mailerAccountPageInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MailerAccountPageInfo")
		case "endCursor":
			out.Values[i] = ec._MailerAccountPageInfo_endCursor(ctx, field, obj)
		case "hasNextPage":
			out.Values[i] = ec._MailerAccountPageInfo_hasNextPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "startCursor":
			out.Values[i] = ec._MailerAccountPageInfo_startCursor(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mailerAuditLogImplementors = []string{"MailerAuditLog"}

func (ec *executionContext) _MailerAuditLog(ctx context.Context, sel ast.SelectionSet, obj *dto2.MailerAuditLog) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mailerAuditLogImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MailerAuditLog")
		case "id":
			out.Values[i] = ec._MailerAuditLog_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "account":
			out.Values[i] = ec._MailerAuditLog_account(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "spanId":
			out.Values[i] = ec._MailerAuditLog_spanId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "template":
			out.Values[i] = ec._MailerAuditLog_template(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._MailerAuditLog_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "recipientHash":
			out.Values[i] = ec._MailerAuditLog_recipientHash(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "contextHash":
			out.Values[i] = ec._MailerAuditLog_contextHash(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "errorCode":
			out.Values[i] = ec._MailerAuditLog_errorCode(ctx, field, obj)
		case "errorMessage":
			out.Values[i] = ec._MailerAuditLog_errorMessage(ctx, field, obj)
		case "warningMessagse":
			out.Values[i] = ec._MailerAuditLog_warningMessagse(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mailerMutationImplementors = []string{"MailerMutation"}

func (ec *executionContext) _MailerMutation(ctx context.Context, sel ast.SelectionSet, obj *dto2.MailerMutation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mailerMutationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MailerMutation")
		case "account":
			out.Values[i] = ec._MailerMutation_account(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "template":
			out.Values[i] = ec._MailerMutation_template(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mailerQueryImplementors = []string{"MailerQuery"}

func (ec *executionContext) _MailerQuery(ctx context.Context, sel ast.SelectionSet, obj *dto2.MailerQuery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mailerQueryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MailerQuery")
		case "account":
			out.Values[i] = ec._MailerQuery_account(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mailerQueryAccountImplementors = []string{"MailerQueryAccount"}

func (ec *executionContext) _MailerQueryAccount(ctx context.Context, sel ast.SelectionSet, obj *dto2.MailerQueryAccount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mailerQueryAccountImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MailerQueryAccount")
		case "get":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MailerQueryAccount_get(ctx, field, obj)
				return res
			})
		case "getMultiple":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MailerQueryAccount_getMultiple(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mailerSenderImplementors = []string{"MailerSender"}

func (ec *executionContext) _MailerSender(ctx context.Context, sel ast.SelectionSet, obj *dto2.MailerSender) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mailerSenderImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MailerSender")
		case "name":
			out.Values[i] = ec._MailerSender_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "email":
			out.Values[i] = ec._MailerSender_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mailerTemplateImplementors = []string{"MailerTemplate"}

func (ec *executionContext) _MailerTemplate(ctx context.Context, sel ast.SelectionSet, obj *dto2.MailerTemplate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mailerTemplateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MailerTemplate")
		case "id":
			out.Values[i] = ec._MailerTemplate_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "version":
			out.Values[i] = ec._MailerTemplate_version(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "space":
			out.Values[i] = ec._MailerTemplate_space(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isActive":
			out.Values[i] = ec._MailerTemplate_isActive(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._MailerTemplate_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._MailerTemplate_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._MailerTemplate_deletedAt(ctx, field, obj)
		case "message":
			out.Values[i] = ec._MailerTemplate_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mailerTemplateEventImplementors = []string{"MailerTemplateEvent"}

func (ec *executionContext) _MailerTemplateEvent(ctx context.Context, sel ast.SelectionSet, obj *dto2.MailerTemplateEvent) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mailerTemplateEventImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MailerTemplateEvent")
		case "id":
			out.Values[i] = ec._MailerTemplateEvent_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "template":
			out.Values[i] = ec._MailerTemplateEvent_template(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user":
			out.Values[i] = ec._MailerTemplateEvent_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "key":
			out.Values[i] = ec._MailerTemplateEvent_key(ctx, field, obj)
		case "payload":
			out.Values[i] = ec._MailerTemplateEvent_payload(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mailerTemplateMessageImplementors = []string{"MailerTemplateMessage"}

func (ec *executionContext) _MailerTemplateMessage(ctx context.Context, sel ast.SelectionSet, obj *dto2.MailerTemplateMessage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mailerTemplateMessageImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MailerTemplateMessage")
		case "title":
			out.Values[i] = ec._MailerTemplateMessage_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "language":
			out.Values[i] = ec._MailerTemplateMessage_language(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bodyHTML":
			out.Values[i] = ec._MailerTemplateMessage_bodyHTML(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bodyText":
			out.Values[i] = ec._MailerTemplateMessage_bodyText(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mailerTemplateMutationImplementors = []string{"MailerTemplateMutation"}

func (ec *executionContext) _MailerTemplateMutation(ctx context.Context, sel ast.SelectionSet, obj *dto2.MailerTemplateMutation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mailerTemplateMutationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MailerTemplateMutation")
		case "create":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MailerTemplateMutation_create(ctx, field, obj)
				return res
			})
		case "update":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MailerTemplateMutation_update(ctx, field, obj)
				return res
			})
		case "delete":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MailerTemplateMutation_delete(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var membershipImplementors = []string{"Membership"}

func (ec *executionContext) _Membership(ctx context.Context, sel ast.SelectionSet, obj *model3.Membership) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, membershipImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Membership")
		case "id":
			out.Values[i] = ec._Membership_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "version":
			out.Values[i] = ec._Membership_version(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "space":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Membership_space(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "user":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Membership_user(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "isActive":
			out.Values[i] = ec._Membership_isActive(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Membership_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Membership_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "roles":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Membership_roles(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var membershipConnectionImplementors = []string{"MembershipConnection"}

func (ec *executionContext) _MembershipConnection(ctx context.Context, sel ast.SelectionSet, obj *model3.MembershipConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, membershipConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MembershipConnection")
		case "edges":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MembershipConnection_edges(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "nodes":
			out.Values[i] = ec._MembershipConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "pageInfo":
			out.Values[i] = ec._MembershipConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var membershipEdgeImplementors = []string{"MembershipEdge"}

func (ec *executionContext) _MembershipEdge(ctx context.Context, sel ast.SelectionSet, obj *model3.MembershipEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, membershipEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MembershipEdge")
		case "cursor":
			out.Values[i] = ec._MembershipEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._MembershipEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var membershipInfoImplementors = []string{"MembershipInfo"}

func (ec *executionContext) _MembershipInfo(ctx context.Context, sel ast.SelectionSet, obj *model3.MembershipInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, membershipInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MembershipInfo")
		case "endCursor":
			out.Values[i] = ec._MembershipInfo_endCursor(ctx, field, obj)
		case "hasNextPage":
			out.Values[i] = ec._MembershipInfo_hasNextPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "startCursor":
			out.Values[i] = ec._MembershipInfo_startCursor(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "accessMutation":
			out.Values[i] = ec._Mutation_accessMutation(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "applicationMutation":
			out.Values[i] = ec._Mutation_applicationMutation(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mailerMutation":
			out.Values[i] = ec._Mutation_mailerMutation(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "s3Mutation":
			out.Values[i] = ec._Mutation_s3Mutation(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "spaceMutation":
			out.Values[i] = ec._Mutation_spaceMutation(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userMutation":
			out.Values[i] = ec._Mutation_userMutation(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var policyImplementors = []string{"Policy"}

func (ec *executionContext) _Policy(ctx context.Context, sel ast.SelectionSet, obj *model2.Policy) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, policyImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Policy")
		case "id":
			out.Values[i] = ec._Policy_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Policy_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Policy_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "kind":
			out.Values[i] = ec._Policy_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "value":
			out.Values[i] = ec._Policy_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "accessQuery":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_accessQuery(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "applicationQuery":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_applicationQuery(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "mailerQuery":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mailerQuery(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "spaceQuery":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_spaceQuery(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "userQuery":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_userQuery(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var s3MutationImplementors = []string{"S3Mutation"}

func (ec *executionContext) _S3Mutation(ctx context.Context, sel ast.SelectionSet, obj *dto3.S3Mutation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, s3MutationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("S3Mutation")
		case "upload":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._S3Mutation_upload(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var s3UploadMutationImplementors = []string{"S3UploadMutation"}

func (ec *executionContext) _S3UploadMutation(ctx context.Context, sel ast.SelectionSet, obj *dto3.S3UploadMutation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, s3UploadMutationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("S3UploadMutation")
		case "token":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._S3UploadMutation_token(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sessionImplementors = []string{"Session"}

func (ec *executionContext) _Session(ctx context.Context, sel ast.SelectionSet, obj *model.Session) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sessionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Session")
		case "id":
			out.Values[i] = ec._Session_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "version":
			out.Values[i] = ec._Session_version(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "user":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Session_user(ctx, field, obj)
				return res
			})
		case "space":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Session_space(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "scopes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Session_scopes(ctx, field, obj)
				return res
			})
		case "context":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Session_context(ctx, field, obj)
				return res
			})
		case "isActive":
			out.Values[i] = ec._Session_isActive(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Session_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Session_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "expiredAt":
			out.Values[i] = ec._Session_expiredAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "jwt":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Session_jwt(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sessionArchiveOutcomeImplementors = []string{"SessionArchiveOutcome"}

func (ec *executionContext) _SessionArchiveOutcome(ctx context.Context, sel ast.SelectionSet, obj *dto.SessionArchiveOutcome) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sessionArchiveOutcomeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SessionArchiveOutcome")
		case "errors":
			out.Values[i] = ec._SessionArchiveOutcome_errors(ctx, field, obj)
		case "result":
			out.Values[i] = ec._SessionArchiveOutcome_result(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sessionContextImplementors = []string{"SessionContext"}

func (ec *executionContext) _SessionContext(ctx context.Context, sel ast.SelectionSet, obj *model.SessionContext) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sessionContextImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SessionContext")
		case "ipAddress":
			out.Values[i] = ec._SessionContext_ipAddress(ctx, field, obj)
		case "country":
			out.Values[i] = ec._SessionContext_country(ctx, field, obj)
		case "deviceType":
			out.Values[i] = ec._SessionContext_deviceType(ctx, field, obj)
		case "deviceName":
			out.Values[i] = ec._SessionContext_deviceName(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sessionCreateOutcomeImplementors = []string{"SessionCreateOutcome"}

func (ec *executionContext) _SessionCreateOutcome(ctx context.Context, sel ast.SelectionSet, obj *dto.SessionCreateOutcome) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sessionCreateOutcomeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SessionCreateOutcome")
		case "errors":
			out.Values[i] = ec._SessionCreateOutcome_errors(ctx, field, obj)
		case "session":
			out.Values[i] = ec._SessionCreateOutcome_session(ctx, field, obj)
		case "token":
			out.Values[i] = ec._SessionCreateOutcome_token(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var spaceImplementors = []string{"Space"}

func (ec *executionContext) _Space(ctx context.Context, sel ast.SelectionSet, obj *model3.Space) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, spaceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Space")
		case "id":
			out.Values[i] = ec._Space_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "version":
			out.Values[i] = ec._Space_version(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "kind":
			out.Values[i] = ec._Space_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "title":
			out.Values[i] = ec._Space_title(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Space_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Space_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "isActive":
			out.Values[i] = ec._Space_isActive(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "domainNames":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Space_domainNames(ctx, field, obj)
				return res
			})
		case "features":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Space_features(ctx, field, obj)
				return res
			})
		case "language":
			out.Values[i] = ec._Space_language(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "parent":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Space_parent(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var spaceCreateOutcomeImplementors = []string{"SpaceCreateOutcome"}

func (ec *executionContext) _SpaceCreateOutcome(ctx context.Context, sel ast.SelectionSet, obj *dto4.SpaceCreateOutcome) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, spaceCreateOutcomeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SpaceCreateOutcome")
		case "errors":
			out.Values[i] = ec._SpaceCreateOutcome_errors(ctx, field, obj)
		case "space":
			out.Values[i] = ec._SpaceCreateOutcome_space(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var spaceFeaturesImplementors = []string{"SpaceFeatures"}

func (ec *executionContext) _SpaceFeatures(ctx context.Context, sel ast.SelectionSet, obj *model3.SpaceFeatures) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, spaceFeaturesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SpaceFeatures")
		case "register":
			out.Values[i] = ec._SpaceFeatures_register(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var spaceMembershipCreateOutcomeImplementors = []string{"SpaceMembershipCreateOutcome"}

func (ec *executionContext) _SpaceMembershipCreateOutcome(ctx context.Context, sel ast.SelectionSet, obj *dto4.SpaceMembershipCreateOutcome) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, spaceMembershipCreateOutcomeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SpaceMembershipCreateOutcome")
		case "errors":
			out.Values[i] = ec._SpaceMembershipCreateOutcome_errors(ctx, field, obj)
		case "membership":
			out.Values[i] = ec._SpaceMembershipCreateOutcome_membership(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var spaceMembershipMutationImplementors = []string{"SpaceMembershipMutation"}

func (ec *executionContext) _SpaceMembershipMutation(ctx context.Context, sel ast.SelectionSet, obj *dto4.SpaceMembershipMutation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, spaceMembershipMutationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SpaceMembershipMutation")
		case "create":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SpaceMembershipMutation_create(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "update":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SpaceMembershipMutation_update(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var spaceMembershipQueryImplementors = []string{"SpaceMembershipQuery"}

func (ec *executionContext) _SpaceMembershipQuery(ctx context.Context, sel ast.SelectionSet, obj *dto4.SpaceMembershipQuery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, spaceMembershipQueryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SpaceMembershipQuery")
		case "load":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SpaceMembershipQuery_load(ctx, field, obj)
				return res
			})
		case "find":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SpaceMembershipQuery_find(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var spaceMutationImplementors = []string{"SpaceMutation"}

func (ec *executionContext) _SpaceMutation(ctx context.Context, sel ast.SelectionSet, obj *dto4.SpaceMutation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, spaceMutationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SpaceMutation")
		case "create":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SpaceMutation_create(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "update":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SpaceMutation_update(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "membership":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SpaceMutation_membership(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var spaceQueryImplementors = []string{"SpaceQuery"}

func (ec *executionContext) _SpaceQuery(ctx context.Context, sel ast.SelectionSet, obj *dto4.SpaceQuery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, spaceQueryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SpaceQuery")
		case "findOne":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SpaceQuery_findOne(ctx, field, obj)
				return res
			})
		case "membership":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SpaceQuery_membership(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userImplementors = []string{"User"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *model4.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":
			out.Values[i] = ec._User_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "version":
			out.Values[i] = ec._User_version(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_name(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "emails":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_emails(ctx, field, obj)
				return res
			})
		case "avatarUri":
			out.Values[i] = ec._User_avatarUri(ctx, field, obj)
		case "isActive":
			out.Values[i] = ec._User_isActive(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._User_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._User_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "language":
			out.Values[i] = ec._User_language(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userEmailImplementors = []string{"UserEmail"}

func (ec *executionContext) _UserEmail(ctx context.Context, sel ast.SelectionSet, obj *model4.UserEmail) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userEmailImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserEmail")
		case "id":
			out.Values[i] = ec._UserEmail_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "verified":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._UserEmail_verified(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "value":
			out.Values[i] = ec._UserEmail_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._UserEmail_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._UserEmail_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "isActive":
			out.Values[i] = ec._UserEmail_isActive(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userEmailsImplementors = []string{"UserEmails"}

func (ec *executionContext) _UserEmails(ctx context.Context, sel ast.SelectionSet, obj *model4.UserEmails) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userEmailsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserEmails")
		case "primary":
			out.Values[i] = ec._UserEmails_primary(ctx, field, obj)
		case "secondary":
			out.Values[i] = ec._UserEmails_secondary(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userMutationImplementors = []string{"UserMutation"}

func (ec *executionContext) _UserMutation(ctx context.Context, sel ast.SelectionSet, obj *dto5.UserMutation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userMutationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserMutation")
		case "create":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._UserMutation_create(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "update":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._UserMutation_update(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userMutationOutcomeImplementors = []string{"UserMutationOutcome"}

func (ec *executionContext) _UserMutationOutcome(ctx context.Context, sel ast.SelectionSet, obj *dto5.UserMutationOutcome) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userMutationOutcomeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserMutationOutcome")
		case "user":
			out.Values[i] = ec._UserMutationOutcome_user(ctx, field, obj)
		case "errors":
			out.Values[i] = ec._UserMutationOutcome_errors(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userNameImplementors = []string{"UserName"}

func (ec *executionContext) _UserName(ctx context.Context, sel ast.SelectionSet, obj *model4.UserName) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userNameImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserName")
		case "firstName":
			out.Values[i] = ec._UserName_firstName(ctx, field, obj)
		case "lastName":
			out.Values[i] = ec._UserName_lastName(ctx, field, obj)
		case "preferredName":
			out.Values[i] = ec._UserName_preferredName(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userQueryImplementors = []string{"UserQuery"}

func (ec *executionContext) _UserQuery(ctx context.Context, sel ast.SelectionSet, obj *dto5.UserQuery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userQueryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserQuery")
		case "load":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._UserQuery_load(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNAccessMode2beanᚋcomponentsᚋscalarᚐAccessMode(ctx context.Context, v interface{}) (scalar.AccessMode, error) {
	var res scalar.AccessMode
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAccessMode2beanᚋcomponentsᚋscalarᚐAccessMode(ctx context.Context, sel ast.SelectionSet, v scalar.AccessMode) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNAccessMutation2beanᚋpkgᚋaccessᚋmodelᚋdtoᚐAccessMutation(ctx context.Context, sel ast.SelectionSet, v dto.AccessMutation) graphql.Marshaler {
	return ec._AccessMutation(ctx, sel, &v)
}

func (ec *executionContext) marshalNAccessMutation2ᚖbeanᚋpkgᚋaccessᚋmodelᚋdtoᚐAccessMutation(ctx context.Context, sel ast.SelectionSet, v *dto.AccessMutation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AccessMutation(ctx, sel, v)
}

func (ec *executionContext) marshalNAccessQuery2beanᚋpkgᚋaccessᚋmodelᚋdtoᚐAccessQuery(ctx context.Context, sel ast.SelectionSet, v dto.AccessQuery) graphql.Marshaler {
	return ec._AccessQuery(ctx, sel, &v)
}

func (ec *executionContext) marshalNAccessQuery2ᚖbeanᚋpkgᚋaccessᚋmodelᚋdtoᚐAccessQuery(ctx context.Context, sel ast.SelectionSet, v *dto.AccessQuery) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AccessQuery(ctx, sel, v)
}

func (ec *executionContext) marshalNAccessSessionMutation2beanᚋpkgᚋaccessᚋmodelᚋdtoᚐAccessSessionMutation(ctx context.Context, sel ast.SelectionSet, v dto.AccessSessionMutation) graphql.Marshaler {
	return ec._AccessSessionMutation(ctx, sel, &v)
}

func (ec *executionContext) marshalNAccessSessionMutation2ᚖbeanᚋpkgᚋaccessᚋmodelᚋdtoᚐAccessSessionMutation(ctx context.Context, sel ast.SelectionSet, v *dto.AccessSessionMutation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AccessSessionMutation(ctx, sel, v)
}

func (ec *executionContext) marshalNAccessSessionQuery2beanᚋpkgᚋaccessᚋmodelᚋdtoᚐAccessSessionQuery(ctx context.Context, sel ast.SelectionSet, v dto.AccessSessionQuery) graphql.Marshaler {
	return ec._AccessSessionQuery(ctx, sel, &v)
}

func (ec *executionContext) marshalNAccessSessionQuery2ᚖbeanᚋpkgᚋaccessᚋmodelᚋdtoᚐAccessSessionQuery(ctx context.Context, sel ast.SelectionSet, v *dto.AccessSessionQuery) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AccessSessionQuery(ctx, sel, v)
}

func (ec *executionContext) marshalNApplicationMutation2beanᚋpkgᚋappᚋmodelᚋdtoᚐApplicationMutation(ctx context.Context, sel ast.SelectionSet, v dto1.ApplicationMutation) graphql.Marshaler {
	return ec._ApplicationMutation(ctx, sel, &v)
}

func (ec *executionContext) marshalNApplicationMutation2ᚖbeanᚋpkgᚋappᚋmodelᚋdtoᚐApplicationMutation(ctx context.Context, sel ast.SelectionSet, v *dto1.ApplicationMutation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ApplicationMutation(ctx, sel, v)
}

func (ec *executionContext) marshalNApplicationOutcome2beanᚋpkgᚋappᚋmodelᚋdtoᚐApplicationOutcome(ctx context.Context, sel ast.SelectionSet, v dto1.ApplicationOutcome) graphql.Marshaler {
	return ec._ApplicationOutcome(ctx, sel, &v)
}

func (ec *executionContext) marshalNApplicationOutcome2ᚖbeanᚋpkgᚋappᚋmodelᚋdtoᚐApplicationOutcome(ctx context.Context, sel ast.SelectionSet, v *dto1.ApplicationOutcome) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ApplicationOutcome(ctx, sel, v)
}

func (ec *executionContext) marshalNApplicationQuery2beanᚋpkgᚋappᚋmodelᚋdtoᚐApplicationQuery(ctx context.Context, sel ast.SelectionSet, v dto1.ApplicationQuery) graphql.Marshaler {
	return ec._ApplicationQuery(ctx, sel, &v)
}

func (ec *executionContext) marshalNApplicationQuery2ᚖbeanᚋpkgᚋappᚋmodelᚋdtoᚐApplicationQuery(ctx context.Context, sel ast.SelectionSet, v *dto1.ApplicationQuery) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ApplicationQuery(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNContentType2beanᚋcomponentsᚋscalarᚐContentType(ctx context.Context, v interface{}) (scalar.ContentType, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := scalar.ContentType(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNContentType2beanᚋcomponentsᚋscalarᚐContentType(ctx context.Context, sel ast.SelectionSet, v scalar.ContentType) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNCredentials2beanᚋpkgᚋintegrationᚋs3ᚋmodelᚐCredentials(ctx context.Context, sel ast.SelectionSet, v model2.Credentials) graphql.Marshaler {
	return ec._Credentials(ctx, sel, &v)
}

func (ec *executionContext) marshalNCredentials2ᚖbeanᚋpkgᚋintegrationᚋs3ᚋmodelᚐCredentials(ctx context.Context, sel ast.SelectionSet, v *model2.Credentials) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Credentials(ctx, sel, v)
}

func (ec *executionContext) marshalNDomainName2ᚖbeanᚋpkgᚋspaceᚋmodelᚐDomainName(ctx context.Context, sel ast.SelectionSet, v *model3.DomainName) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DomainName(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDomainNameInput2ᚖbeanᚋpkgᚋspaceᚋmodelᚋdtoᚐDomainNameInput(ctx context.Context, v interface{}) (*dto4.DomainNameInput, error) {
	res, err := ec.unmarshalInputDomainNameInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEmailAddress2beanᚋcomponentsᚋscalarᚐEmailAddress(ctx context.Context, v interface{}) (scalar.EmailAddress, error) {
	var res scalar.EmailAddress
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEmailAddress2beanᚋcomponentsᚋscalarᚐEmailAddress(ctx context.Context, sel ast.SelectionSet, v scalar.EmailAddress) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNError2beanᚋcomponentsᚋutilᚐError(ctx context.Context, sel ast.SelectionSet, v util.Error) graphql.Marshaler {
	return ec._Error(ctx, sel, &v)
}

func (ec *executionContext) marshalNError2ᚖbeanᚋcomponentsᚋutilᚐError(ctx context.Context, sel ast.SelectionSet, v *util.Error) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Error(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFileType2beanᚋpkgᚋinfraᚋapiᚐFileType(ctx context.Context, v interface{}) (api.FileType, error) {
	var res api.FileType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFileType2beanᚋpkgᚋinfraᚋapiᚐFileType(ctx context.Context, sel ast.SelectionSet, v api.FileType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNFileType2ᚕbeanᚋpkgᚋinfraᚋapiᚐFileTypeᚄ(ctx context.Context, v interface{}) ([]api.FileType, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]api.FileType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFileType2beanᚋpkgᚋinfraᚋapiᚐFileType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNFileType2ᚕbeanᚋpkgᚋinfraᚋapiᚐFileTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []api.FileType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFileType2beanᚋpkgᚋinfraᚋapiᚐFileType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNJWT2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNJWT2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNLanguage2beanᚋpkgᚋinfraᚋapiᚐLanguage(ctx context.Context, v interface{}) (api.Language, error) {
	var res api.Language
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLanguage2beanᚋpkgᚋinfraᚋapiᚐLanguage(ctx context.Context, sel ast.SelectionSet, v api.Language) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNMailerAccount2ᚕᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccountᚄ(ctx context.Context, sel ast.SelectionSet, v []*dto2.MailerAccount) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMailerAccount2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccount(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNMailerAccount2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccount(ctx context.Context, sel ast.SelectionSet, v *dto2.MailerAccount) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._MailerAccount(ctx, sel, v)
}

func (ec *executionContext) marshalNMailerAccountAttachment2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccountAttachment(ctx context.Context, sel ast.SelectionSet, v *dto2.MailerAccountAttachment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._MailerAccountAttachment(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMailerAccountCreateInput2beanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccountCreateInput(ctx context.Context, v interface{}) (dto2.MailerAccountCreateInput, error) {
	res, err := ec.unmarshalInputMailerAccountCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMailerAccountEdge2ᚕᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccountEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*dto2.MailerAccountEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMailerAccountEdge2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccountEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNMailerAccountEdge2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccountEdge(ctx context.Context, sel ast.SelectionSet, v *dto2.MailerAccountEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._MailerAccountEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNMailerAccountMutation2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccountMutation(ctx context.Context, sel ast.SelectionSet, v *dto2.MailerAccountMutation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._MailerAccountMutation(ctx, sel, v)
}

func (ec *executionContext) marshalNMailerAccountMutationOutcome2beanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccountMutationOutcome(ctx context.Context, sel ast.SelectionSet, v dto2.MailerAccountMutationOutcome) graphql.Marshaler {
	return ec._MailerAccountMutationOutcome(ctx, sel, &v)
}

func (ec *executionContext) marshalNMailerAccountMutationOutcome2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccountMutationOutcome(ctx context.Context, sel ast.SelectionSet, v *dto2.MailerAccountMutationOutcome) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._MailerAccountMutationOutcome(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMailerAccountSenderInput2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccountSenderInput(ctx context.Context, v interface{}) (*dto2.MailerAccountSenderInput, error) {
	res, err := ec.unmarshalInputMailerAccountSenderInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMailerAccountStatus2beanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccountStatus(ctx context.Context, v interface{}) (dto2.MailerAccountStatus, error) {
	var res dto2.MailerAccountStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMailerAccountStatus2beanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccountStatus(ctx context.Context, sel ast.SelectionSet, v dto2.MailerAccountStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNMailerAccountUpdateInput2beanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccountUpdateInput(ctx context.Context, v interface{}) (dto2.MailerAccountUpdateInput, error) {
	res, err := ec.unmarshalInputMailerAccountUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMailerAccountUpdateValueInput2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccountUpdateValueInput(ctx context.Context, v interface{}) (*dto2.MailerAccountUpdateValueInput, error) {
	res, err := ec.unmarshalInputMailerAccountUpdateValueInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMailerMutation2beanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerMutation(ctx context.Context, sel ast.SelectionSet, v dto2.MailerMutation) graphql.Marshaler {
	return ec._MailerMutation(ctx, sel, &v)
}

func (ec *executionContext) marshalNMailerMutation2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerMutation(ctx context.Context, sel ast.SelectionSet, v *dto2.MailerMutation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._MailerMutation(ctx, sel, v)
}

func (ec *executionContext) marshalNMailerQuery2beanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerQuery(ctx context.Context, sel ast.SelectionSet, v dto2.MailerQuery) graphql.Marshaler {
	return ec._MailerQuery(ctx, sel, &v)
}

func (ec *executionContext) marshalNMailerQuery2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerQuery(ctx context.Context, sel ast.SelectionSet, v *dto2.MailerQuery) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._MailerQuery(ctx, sel, v)
}

func (ec *executionContext) marshalNMailerQueryAccount2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerQueryAccount(ctx context.Context, sel ast.SelectionSet, v *dto2.MailerQueryAccount) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._MailerQueryAccount(ctx, sel, v)
}

func (ec *executionContext) marshalNMailerSender2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerSender(ctx context.Context, sel ast.SelectionSet, v *dto2.MailerSender) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._MailerSender(ctx, sel, v)
}

func (ec *executionContext) marshalNMailerTemplate2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerTemplate(ctx context.Context, sel ast.SelectionSet, v *dto2.MailerTemplate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._MailerTemplate(ctx, sel, v)
}

func (ec *executionContext) marshalNMailerTemplateMessage2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerTemplateMessage(ctx context.Context, sel ast.SelectionSet, v *dto2.MailerTemplateMessage) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._MailerTemplateMessage(ctx, sel, v)
}

func (ec *executionContext) marshalNMailerTemplateMutation2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerTemplateMutation(ctx context.Context, sel ast.SelectionSet, v *dto2.MailerTemplateMutation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._MailerTemplateMutation(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMap2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	res, err := graphql.UnmarshalMap(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMap2map(ctx context.Context, sel ast.SelectionSet, v map[string]interface{}) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := graphql.MarshalMap(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNMembership2beanᚋpkgᚋspaceᚋmodelᚐMembership(ctx context.Context, sel ast.SelectionSet, v model3.Membership) graphql.Marshaler {
	return ec._Membership(ctx, sel, &v)
}

func (ec *executionContext) marshalNMembership2ᚕbeanᚋpkgᚋspaceᚋmodelᚐMembershipᚄ(ctx context.Context, sel ast.SelectionSet, v []model3.Membership) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMembership2beanᚋpkgᚋspaceᚋmodelᚐMembership(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNMembershipConnection2beanᚋpkgᚋspaceᚋmodelᚐMembershipConnection(ctx context.Context, sel ast.SelectionSet, v model3.MembershipConnection) graphql.Marshaler {
	return ec._MembershipConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNMembershipConnection2ᚖbeanᚋpkgᚋspaceᚋmodelᚐMembershipConnection(ctx context.Context, sel ast.SelectionSet, v *model3.MembershipConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._MembershipConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNMembershipEdge2ᚕᚖbeanᚋpkgᚋspaceᚋmodelᚐMembershipEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model3.MembershipEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMembershipEdge2ᚖbeanᚋpkgᚋspaceᚋmodelᚐMembershipEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNMembershipEdge2ᚖbeanᚋpkgᚋspaceᚋmodelᚐMembershipEdge(ctx context.Context, sel ast.SelectionSet, v *model3.MembershipEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._MembershipEdge(ctx, sel, v)
}

func (ec *executionContext) marshalNMembershipInfo2beanᚋpkgᚋspaceᚋmodelᚐMembershipInfo(ctx context.Context, sel ast.SelectionSet, v model3.MembershipInfo) graphql.Marshaler {
	return ec._MembershipInfo(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNMembershipsFilter2beanᚋpkgᚋspaceᚋmodelᚋdtoᚐMembershipsFilter(ctx context.Context, v interface{}) (dto4.MembershipsFilter, error) {
	res, err := ec.unmarshalInputMembershipsFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPolicy2ᚖbeanᚋpkgᚋintegrationᚋs3ᚋmodelᚐPolicy(ctx context.Context, sel ast.SelectionSet, v *model2.Policy) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Policy(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPolicyKind2beanᚋpkgᚋintegrationᚋs3ᚋmodelᚐPolicyKind(ctx context.Context, v interface{}) (model2.PolicyKind, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := model2.PolicyKind(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPolicyKind2beanᚋpkgᚋintegrationᚋs3ᚋmodelᚐPolicyKind(ctx context.Context, sel ast.SelectionSet, v model2.PolicyKind) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNS3ApplicationPolicyCreateInput2beanᚋpkgᚋintegrationᚋs3ᚋmodelᚋdtoᚐS3ApplicationPolicyCreateInput(ctx context.Context, v interface{}) (dto3.S3ApplicationPolicyCreateInput, error) {
	res, err := ec.unmarshalInputS3ApplicationPolicyCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNS3ApplicationPolicyDeleteInput2beanᚋpkgᚋintegrationᚋs3ᚋmodelᚋdtoᚐS3ApplicationPolicyDeleteInput(ctx context.Context, v interface{}) (dto3.S3ApplicationPolicyDeleteInput, error) {
	res, err := ec.unmarshalInputS3ApplicationPolicyDeleteInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNS3ApplicationPolicyUpdateInput2beanᚋpkgᚋintegrationᚋs3ᚋmodelᚋdtoᚐS3ApplicationPolicyUpdateInput(ctx context.Context, v interface{}) (dto3.S3ApplicationPolicyUpdateInput, error) {
	res, err := ec.unmarshalInputS3ApplicationPolicyUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNS3Mutation2beanᚋpkgᚋintegrationᚋs3ᚋmodelᚋdtoᚐS3Mutation(ctx context.Context, sel ast.SelectionSet, v dto3.S3Mutation) graphql.Marshaler {
	return ec._S3Mutation(ctx, sel, &v)
}

func (ec *executionContext) marshalNS3Mutation2ᚖbeanᚋpkgᚋintegrationᚋs3ᚋmodelᚋdtoᚐS3Mutation(ctx context.Context, sel ast.SelectionSet, v *dto3.S3Mutation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._S3Mutation(ctx, sel, v)
}

func (ec *executionContext) marshalNS3UploadMutation2beanᚋpkgᚋintegrationᚋs3ᚋmodelᚋdtoᚐS3UploadMutation(ctx context.Context, sel ast.SelectionSet, v dto3.S3UploadMutation) graphql.Marshaler {
	return ec._S3UploadMutation(ctx, sel, &v)
}

func (ec *executionContext) marshalNS3UploadMutation2ᚖbeanᚋpkgᚋintegrationᚋs3ᚋmodelᚋdtoᚐS3UploadMutation(ctx context.Context, sel ast.SelectionSet, v *dto3.S3UploadMutation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._S3UploadMutation(ctx, sel, v)
}

func (ec *executionContext) unmarshalNS3UploadTokenInput2beanᚋpkgᚋintegrationᚋs3ᚋmodelᚋdtoᚐS3UploadTokenInput(ctx context.Context, v interface{}) (dto3.S3UploadTokenInput, error) {
	res, err := ec.unmarshalInputS3UploadTokenInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSessionArchiveOutcome2beanᚋpkgᚋaccessᚋmodelᚋdtoᚐSessionArchiveOutcome(ctx context.Context, sel ast.SelectionSet, v dto.SessionArchiveOutcome) graphql.Marshaler {
	return ec._SessionArchiveOutcome(ctx, sel, &v)
}

func (ec *executionContext) marshalNSessionArchiveOutcome2ᚖbeanᚋpkgᚋaccessᚋmodelᚋdtoᚐSessionArchiveOutcome(ctx context.Context, sel ast.SelectionSet, v *dto.SessionArchiveOutcome) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SessionArchiveOutcome(ctx, sel, v)
}

func (ec *executionContext) marshalNSessionCreateOutcome2beanᚋpkgᚋaccessᚋmodelᚋdtoᚐSessionCreateOutcome(ctx context.Context, sel ast.SelectionSet, v dto.SessionCreateOutcome) graphql.Marshaler {
	return ec._SessionCreateOutcome(ctx, sel, &v)
}

func (ec *executionContext) marshalNSessionCreateOutcome2ᚖbeanᚋpkgᚋaccessᚋmodelᚋdtoᚐSessionCreateOutcome(ctx context.Context, sel ast.SelectionSet, v *dto.SessionCreateOutcome) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SessionCreateOutcome(ctx, sel, v)
}

func (ec *executionContext) marshalNSpace2beanᚋpkgᚋspaceᚋmodelᚐSpace(ctx context.Context, sel ast.SelectionSet, v model3.Space) graphql.Marshaler {
	return ec._Space(ctx, sel, &v)
}

func (ec *executionContext) marshalNSpace2ᚕᚖbeanᚋpkgᚋspaceᚋmodelᚐSpaceᚄ(ctx context.Context, sel ast.SelectionSet, v []*model3.Space) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSpace2ᚖbeanᚋpkgᚋspaceᚋmodelᚐSpace(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNSpace2ᚖbeanᚋpkgᚋspaceᚋmodelᚐSpace(ctx context.Context, sel ast.SelectionSet, v *model3.Space) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Space(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSpaceCreateInput2beanᚋpkgᚋspaceᚋmodelᚋdtoᚐSpaceCreateInput(ctx context.Context, v interface{}) (dto4.SpaceCreateInput, error) {
	res, err := ec.unmarshalInputSpaceCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSpaceCreateInputObject2beanᚋpkgᚋspaceᚋmodelᚋdtoᚐSpaceCreateInputObject(ctx context.Context, v interface{}) (dto4.SpaceCreateInputObject, error) {
	res, err := ec.unmarshalInputSpaceCreateInputObject(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSpaceCreateOutcome2beanᚋpkgᚋspaceᚋmodelᚋdtoᚐSpaceCreateOutcome(ctx context.Context, sel ast.SelectionSet, v dto4.SpaceCreateOutcome) graphql.Marshaler {
	return ec._SpaceCreateOutcome(ctx, sel, &v)
}

func (ec *executionContext) marshalNSpaceCreateOutcome2ᚖbeanᚋpkgᚋspaceᚋmodelᚋdtoᚐSpaceCreateOutcome(ctx context.Context, sel ast.SelectionSet, v *dto4.SpaceCreateOutcome) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SpaceCreateOutcome(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSpaceFeaturesInput2beanᚋpkgᚋspaceᚋmodelᚋdtoᚐSpaceFeaturesInput(ctx context.Context, v interface{}) (dto4.SpaceFeaturesInput, error) {
	res, err := ec.unmarshalInputSpaceFeaturesInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSpaceFilters2beanᚋpkgᚋspaceᚋmodelᚋdtoᚐSpaceFilters(ctx context.Context, v interface{}) (dto4.SpaceFilters, error) {
	res, err := ec.unmarshalInputSpaceFilters(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSpaceKind2beanᚋpkgᚋspaceᚋmodelᚐSpaceKind(ctx context.Context, v interface{}) (model3.SpaceKind, error) {
	var res model3.SpaceKind
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSpaceKind2beanᚋpkgᚋspaceᚋmodelᚐSpaceKind(ctx context.Context, sel ast.SelectionSet, v model3.SpaceKind) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNSpaceMembershipCreateInput2beanᚋpkgᚋspaceᚋmodelᚋdtoᚐSpaceMembershipCreateInput(ctx context.Context, v interface{}) (dto4.SpaceMembershipCreateInput, error) {
	res, err := ec.unmarshalInputSpaceMembershipCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSpaceMembershipCreateOutcome2beanᚋpkgᚋspaceᚋmodelᚋdtoᚐSpaceMembershipCreateOutcome(ctx context.Context, sel ast.SelectionSet, v dto4.SpaceMembershipCreateOutcome) graphql.Marshaler {
	return ec._SpaceMembershipCreateOutcome(ctx, sel, &v)
}

func (ec *executionContext) marshalNSpaceMembershipCreateOutcome2ᚖbeanᚋpkgᚋspaceᚋmodelᚋdtoᚐSpaceMembershipCreateOutcome(ctx context.Context, sel ast.SelectionSet, v *dto4.SpaceMembershipCreateOutcome) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SpaceMembershipCreateOutcome(ctx, sel, v)
}

func (ec *executionContext) marshalNSpaceMembershipMutation2beanᚋpkgᚋspaceᚋmodelᚋdtoᚐSpaceMembershipMutation(ctx context.Context, sel ast.SelectionSet, v dto4.SpaceMembershipMutation) graphql.Marshaler {
	return ec._SpaceMembershipMutation(ctx, sel, &v)
}

func (ec *executionContext) marshalNSpaceMembershipMutation2ᚖbeanᚋpkgᚋspaceᚋmodelᚋdtoᚐSpaceMembershipMutation(ctx context.Context, sel ast.SelectionSet, v *dto4.SpaceMembershipMutation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SpaceMembershipMutation(ctx, sel, v)
}

func (ec *executionContext) marshalNSpaceMembershipQuery2beanᚋpkgᚋspaceᚋmodelᚋdtoᚐSpaceMembershipQuery(ctx context.Context, sel ast.SelectionSet, v dto4.SpaceMembershipQuery) graphql.Marshaler {
	return ec._SpaceMembershipQuery(ctx, sel, &v)
}

func (ec *executionContext) marshalNSpaceMembershipQuery2ᚖbeanᚋpkgᚋspaceᚋmodelᚋdtoᚐSpaceMembershipQuery(ctx context.Context, sel ast.SelectionSet, v *dto4.SpaceMembershipQuery) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SpaceMembershipQuery(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSpaceMembershipUpdateInput2beanᚋpkgᚋspaceᚋmodelᚋdtoᚐSpaceMembershipUpdateInput(ctx context.Context, v interface{}) (dto4.SpaceMembershipUpdateInput, error) {
	res, err := ec.unmarshalInputSpaceMembershipUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSpaceMutation2beanᚋpkgᚋspaceᚋmodelᚋdtoᚐSpaceMutation(ctx context.Context, sel ast.SelectionSet, v dto4.SpaceMutation) graphql.Marshaler {
	return ec._SpaceMutation(ctx, sel, &v)
}

func (ec *executionContext) marshalNSpaceMutation2ᚖbeanᚋpkgᚋspaceᚋmodelᚋdtoᚐSpaceMutation(ctx context.Context, sel ast.SelectionSet, v *dto4.SpaceMutation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SpaceMutation(ctx, sel, v)
}

func (ec *executionContext) marshalNSpaceQuery2beanᚋpkgᚋspaceᚋmodelᚋdtoᚐSpaceQuery(ctx context.Context, sel ast.SelectionSet, v dto4.SpaceQuery) graphql.Marshaler {
	return ec._SpaceQuery(ctx, sel, &v)
}

func (ec *executionContext) marshalNSpaceQuery2ᚖbeanᚋpkgᚋspaceᚋmodelᚋdtoᚐSpaceQuery(ctx context.Context, sel ast.SelectionSet, v *dto4.SpaceQuery) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SpaceQuery(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSpaceUpdateInput2beanᚋpkgᚋspaceᚋmodelᚋdtoᚐSpaceUpdateInput(ctx context.Context, v interface{}) (dto4.SpaceUpdateInput, error) {
	res, err := ec.unmarshalInputSpaceUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := graphql.MarshalTime(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNUri2beanᚋcomponentsᚋscalarᚐUri(ctx context.Context, v interface{}) (scalar.Uri, error) {
	var res scalar.Uri
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUri2beanᚋcomponentsᚋscalarᚐUri(ctx context.Context, sel ast.SelectionSet, v scalar.Uri) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNUser2beanᚋpkgᚋuserᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v model4.User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalNUser2ᚖbeanᚋpkgᚋuserᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v *model4.User) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserEmailInput2ᚖbeanᚋpkgᚋuserᚋmodelᚋdtoᚐUserEmailInput(ctx context.Context, v interface{}) (*dto5.UserEmailInput, error) {
	res, err := ec.unmarshalInputUserEmailInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserMutation2beanᚋpkgᚋuserᚋmodelᚋdtoᚐUserMutation(ctx context.Context, sel ast.SelectionSet, v dto5.UserMutation) graphql.Marshaler {
	return ec._UserMutation(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserMutation2ᚖbeanᚋpkgᚋuserᚋmodelᚋdtoᚐUserMutation(ctx context.Context, sel ast.SelectionSet, v *dto5.UserMutation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserMutation(ctx, sel, v)
}

func (ec *executionContext) marshalNUserMutationOutcome2beanᚋpkgᚋuserᚋmodelᚋdtoᚐUserMutationOutcome(ctx context.Context, sel ast.SelectionSet, v dto5.UserMutationOutcome) graphql.Marshaler {
	return ec._UserMutationOutcome(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserMutationOutcome2ᚖbeanᚋpkgᚋuserᚋmodelᚋdtoᚐUserMutationOutcome(ctx context.Context, sel ast.SelectionSet, v *dto5.UserMutationOutcome) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserMutationOutcome(ctx, sel, v)
}

func (ec *executionContext) marshalNUserName2beanᚋpkgᚋuserᚋmodelᚐUserName(ctx context.Context, sel ast.SelectionSet, v model4.UserName) graphql.Marshaler {
	return ec._UserName(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserName2ᚖbeanᚋpkgᚋuserᚋmodelᚐUserName(ctx context.Context, sel ast.SelectionSet, v *model4.UserName) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserName(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserNameInput2ᚖbeanᚋpkgᚋuserᚋmodelᚋdtoᚐUserNameInput(ctx context.Context, v interface{}) (*dto5.UserNameInput, error) {
	res, err := ec.unmarshalInputUserNameInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserPasswordInput2ᚖbeanᚋpkgᚋuserᚋmodelᚋdtoᚐUserPasswordInput(ctx context.Context, v interface{}) (*dto5.UserPasswordInput, error) {
	res, err := ec.unmarshalInputUserPasswordInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserQuery2beanᚋpkgᚋuserᚋmodelᚋdtoᚐUserQuery(ctx context.Context, sel ast.SelectionSet, v dto5.UserQuery) graphql.Marshaler {
	return ec._UserQuery(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserQuery2ᚖbeanᚋpkgᚋuserᚋmodelᚋdtoᚐUserQuery(ctx context.Context, sel ast.SelectionSet, v *dto5.UserQuery) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserQuery(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserUpdateInput2beanᚋpkgᚋuserᚋmodelᚋdtoᚐUserUpdateInput(ctx context.Context, v interface{}) (dto5.UserUpdateInput, error) {
	res, err := ec.unmarshalInputUserUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOAccessScope2ᚕᚖbeanᚋpkgᚋaccessᚋmodelᚐAccessScope(ctx context.Context, v interface{}) ([]*model.AccessScope, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AccessScope, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOAccessScope2ᚖbeanᚋpkgᚋaccessᚋmodelᚐAccessScope(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOAccessScope2ᚕᚖbeanᚋpkgᚋaccessᚋmodelᚐAccessScope(ctx context.Context, sel ast.SelectionSet, v []*model.AccessScope) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAccessScope2ᚖbeanᚋpkgᚋaccessᚋmodelᚐAccessScope(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOAccessScope2ᚖbeanᚋpkgᚋaccessᚋmodelᚐAccessScope(ctx context.Context, v interface{}) (*model.AccessScope, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.AccessScope)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAccessScope2ᚖbeanᚋpkgᚋaccessᚋmodelᚐAccessScope(ctx context.Context, sel ast.SelectionSet, v *model.AccessScope) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOApplication2ᚖbeanᚋpkgᚋappᚋmodelᚐApplication(ctx context.Context, sel ast.SelectionSet, v *model1.Application) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Application(ctx, sel, v)
}

func (ec *executionContext) unmarshalOApplicationCreateInput2ᚖbeanᚋpkgᚋappᚋmodelᚋdtoᚐApplicationCreateInput(ctx context.Context, v interface{}) (*dto1.ApplicationCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputApplicationCreateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOApplicationUpdateInput2ᚖbeanᚋpkgᚋappᚋmodelᚋdtoᚐApplicationUpdateInput(ctx context.Context, v interface{}) (*dto1.ApplicationUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputApplicationUpdateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOCountryCode2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCountryCode2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalODeviceType2ᚖbeanᚋpkgᚋaccessᚋmodelᚐDeviceType(ctx context.Context, v interface{}) (*model.DeviceType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.DeviceType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODeviceType2ᚖbeanᚋpkgᚋaccessᚋmodelᚐDeviceType(ctx context.Context, sel ast.SelectionSet, v *model.DeviceType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalODomainName2ᚕᚖbeanᚋpkgᚋspaceᚋmodelᚐDomainName(ctx context.Context, sel ast.SelectionSet, v []*model3.DomainName) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODomainName2ᚖbeanᚋpkgᚋspaceᚋmodelᚐDomainName(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalODomainName2ᚖbeanᚋpkgᚋspaceᚋmodelᚐDomainName(ctx context.Context, sel ast.SelectionSet, v *model3.DomainName) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DomainName(ctx, sel, v)
}

func (ec *executionContext) unmarshalODomainNameInput2ᚕᚖbeanᚋpkgᚋspaceᚋmodelᚋdtoᚐDomainNameInput(ctx context.Context, v interface{}) ([]*dto4.DomainNameInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*dto4.DomainNameInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalODomainNameInput2ᚖbeanᚋpkgᚋspaceᚋmodelᚋdtoᚐDomainNameInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODomainNameInput2ᚖbeanᚋpkgᚋspaceᚋmodelᚋdtoᚐDomainNameInput(ctx context.Context, v interface{}) (*dto4.DomainNameInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDomainNameInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODomainNames2ᚖbeanᚋpkgᚋspaceᚋmodelᚐDomainNames(ctx context.Context, sel ast.SelectionSet, v *model3.DomainNames) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DomainNames(ctx, sel, v)
}

func (ec *executionContext) unmarshalODomainNamesInput2ᚖbeanᚋpkgᚋspaceᚋmodelᚋdtoᚐDomainNamesInput(ctx context.Context, v interface{}) (*dto4.DomainNamesInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDomainNamesInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEmailAddress2ᚖbeanᚋcomponentsᚋscalarᚐEmailAddress(ctx context.Context, v interface{}) (*scalar.EmailAddress, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(scalar.EmailAddress)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEmailAddress2ᚖbeanᚋcomponentsᚋscalarᚐEmailAddress(ctx context.Context, sel ast.SelectionSet, v *scalar.EmailAddress) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOError2ᚕbeanᚋcomponentsᚋutilᚐErrorᚄ(ctx context.Context, sel ast.SelectionSet, v []util.Error) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNError2beanᚋcomponentsᚋutilᚐError(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOError2ᚕᚖbeanᚋcomponentsᚋutilᚐErrorᚄ(ctx context.Context, sel ast.SelectionSet, v []*util.Error) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNError2ᚖbeanᚋcomponentsᚋutilᚐError(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOErrorCode2ᚖbeanᚋcomponentsᚋutilᚐErrorCode(ctx context.Context, v interface{}) (*util.ErrorCode, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(util.ErrorCode)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOErrorCode2ᚖbeanᚋcomponentsᚋutilᚐErrorCode(ctx context.Context, sel ast.SelectionSet, v *util.ErrorCode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOFileType2ᚕbeanᚋpkgᚋinfraᚋapiᚐFileTypeᚄ(ctx context.Context, v interface{}) ([]api.FileType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]api.FileType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFileType2beanᚋpkgᚋinfraᚋapiᚐFileType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOFileType2ᚕbeanᚋpkgᚋinfraᚋapiᚐFileTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []api.FileType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFileType2beanᚋpkgᚋinfraᚋapiᚐFileType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalID(*v)
}

func (ec *executionContext) unmarshalOIP2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOIP2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOLanguage2ᚖbeanᚋpkgᚋinfraᚋapiᚐLanguage(ctx context.Context, v interface{}) (*api.Language, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(api.Language)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLanguage2ᚖbeanᚋpkgᚋinfraᚋapiᚐLanguage(ctx context.Context, sel ast.SelectionSet, v *api.Language) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOMailerAccount2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccount(ctx context.Context, sel ast.SelectionSet, v *dto2.MailerAccount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MailerAccount(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMailerAccountAttachmentInput2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccountAttachmentInput(ctx context.Context, v interface{}) (*dto2.MailerAccountAttachmentInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMailerAccountAttachmentInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMailerAccountPageInfo2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccountPageInfo(ctx context.Context, sel ast.SelectionSet, v *dto2.MailerAccountPageInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MailerAccountPageInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMailerAccountStatus2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccountStatus(ctx context.Context, v interface{}) (*dto2.MailerAccountStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(dto2.MailerAccountStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMailerAccountStatus2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccountStatus(ctx context.Context, sel ast.SelectionSet, v *dto2.MailerAccountStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOMailerAccountUpdateSenderInput2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerAccountUpdateSenderInput(ctx context.Context, v interface{}) (*dto2.MailerAccountUpdateSenderInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMailerAccountUpdateSenderInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMailerTemplate2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerTemplate(ctx context.Context, sel ast.SelectionSet, v *dto2.MailerTemplate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MailerTemplate(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMailerTemplateEventKey2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerTemplateEventKey(ctx context.Context, v interface{}) (*dto2.MailerTemplateEventKey, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(dto2.MailerTemplateEventKey)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMailerTemplateEventKey2ᚖbeanᚋpkgᚋintegrationᚋmailerᚋmodelᚋdtoᚐMailerTemplateEventKey(ctx context.Context, sel ast.SelectionSet, v *dto2.MailerTemplateEventKey) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOMembership2ᚖbeanᚋpkgᚋspaceᚋmodelᚐMembership(ctx context.Context, sel ast.SelectionSet, v *model3.Membership) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Membership(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMembershipsFilterSpace2ᚖbeanᚋpkgᚋspaceᚋmodelᚋdtoᚐMembershipsFilterSpace(ctx context.Context, v interface{}) (*dto4.MembershipsFilterSpace, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMembershipsFilterSpace(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPolicy2ᚕᚖbeanᚋpkgᚋintegrationᚋs3ᚋmodelᚐPolicyᚄ(ctx context.Context, sel ast.SelectionSet, v []*model2.Policy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPolicy2ᚖbeanᚋpkgᚋintegrationᚋs3ᚋmodelᚐPolicy(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOS3ApplicationCredentialsUpdateInput2ᚖbeanᚋpkgᚋintegrationᚋs3ᚋmodelᚋdtoᚐS3ApplicationCredentialsUpdateInput(ctx context.Context, v interface{}) (*dto3.S3ApplicationCredentialsUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputS3ApplicationCredentialsUpdateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOS3ApplicationPolicyCreateInput2ᚕbeanᚋpkgᚋintegrationᚋs3ᚋmodelᚋdtoᚐS3ApplicationPolicyCreateInputᚄ(ctx context.Context, v interface{}) ([]dto3.S3ApplicationPolicyCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]dto3.S3ApplicationPolicyCreateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNS3ApplicationPolicyCreateInput2beanᚋpkgᚋintegrationᚋs3ᚋmodelᚋdtoᚐS3ApplicationPolicyCreateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOS3ApplicationPolicyDeleteInput2ᚕbeanᚋpkgᚋintegrationᚋs3ᚋmodelᚋdtoᚐS3ApplicationPolicyDeleteInputᚄ(ctx context.Context, v interface{}) ([]dto3.S3ApplicationPolicyDeleteInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]dto3.S3ApplicationPolicyDeleteInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNS3ApplicationPolicyDeleteInput2beanᚋpkgᚋintegrationᚋs3ᚋmodelᚋdtoᚐS3ApplicationPolicyDeleteInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOS3ApplicationPolicyMutationInput2ᚖbeanᚋpkgᚋintegrationᚋs3ᚋmodelᚋdtoᚐS3ApplicationPolicyMutationInput(ctx context.Context, v interface{}) (*dto3.S3ApplicationPolicyMutationInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputS3ApplicationPolicyMutationInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOS3ApplicationPolicyUpdateInput2ᚕbeanᚋpkgᚋintegrationᚋs3ᚋmodelᚋdtoᚐS3ApplicationPolicyUpdateInputᚄ(ctx context.Context, v interface{}) ([]dto3.S3ApplicationPolicyUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]dto3.S3ApplicationPolicyUpdateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNS3ApplicationPolicyUpdateInput2beanᚋpkgᚋintegrationᚋs3ᚋmodelᚋdtoᚐS3ApplicationPolicyUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOSession2ᚖbeanᚋpkgᚋaccessᚋmodelᚐSession(ctx context.Context, sel ast.SelectionSet, v *model.Session) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Session(ctx, sel, v)
}

func (ec *executionContext) marshalOSessionContext2ᚖbeanᚋpkgᚋaccessᚋmodelᚐSessionContext(ctx context.Context, sel ast.SelectionSet, v *model.SessionContext) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SessionContext(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSessionCreateContextInput2ᚖbeanᚋpkgᚋaccessᚋmodelᚋdtoᚐSessionCreateContextInput(ctx context.Context, v interface{}) (*dto.SessionCreateContextInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSessionCreateContextInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSessionCreateGenerateOTLT2ᚖbeanᚋpkgᚋaccessᚋmodelᚋdtoᚐSessionCreateGenerateOTLT(ctx context.Context, v interface{}) (*dto.SessionCreateGenerateOTLT, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSessionCreateGenerateOTLT(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSessionCreateInput2ᚖbeanᚋpkgᚋaccessᚋmodelᚋdtoᚐSessionCreateInput(ctx context.Context, v interface{}) (*dto.SessionCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSessionCreateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSessionCreateUseCredentialsInput2ᚖbeanᚋpkgᚋaccessᚋmodelᚋdtoᚐSessionCreateUseCredentialsInput(ctx context.Context, v interface{}) (*dto.SessionCreateUseCredentialsInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSessionCreateUseCredentialsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSessionCreateUseOTLT2ᚖbeanᚋpkgᚋaccessᚋmodelᚋdtoᚐSessionCreateUseOTLT(ctx context.Context, v interface{}) (*dto.SessionCreateUseOTLT, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSessionCreateUseOTLT(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSpace2ᚖbeanᚋpkgᚋspaceᚋmodelᚐSpace(ctx context.Context, sel ast.SelectionSet, v *model3.Space) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Space(ctx, sel, v)
}

func (ec *executionContext) marshalOSpaceFeatures2ᚖbeanᚋpkgᚋspaceᚋmodelᚐSpaceFeatures(ctx context.Context, sel ast.SelectionSet, v *model3.SpaceFeatures) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SpaceFeatures(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSpaceUpdateInputFeatures2ᚖbeanᚋpkgᚋspaceᚋmodelᚋdtoᚐSpaceUpdateInputFeatures(ctx context.Context, v interface{}) (*dto4.SpaceUpdateInputFeatures, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSpaceUpdateInputFeatures(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSpaceUpdateInputObject2ᚖbeanᚋpkgᚋspaceᚋmodelᚋdtoᚐSpaceUpdateInputObject(ctx context.Context, v interface{}) (*dto4.SpaceUpdateInputObject, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSpaceUpdateInputObject(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*v)
}

func (ec *executionContext) unmarshalOUri2ᚖbeanᚋcomponentsᚋscalarᚐUri(ctx context.Context, v interface{}) (*scalar.Uri, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(scalar.Uri)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUri2ᚖbeanᚋcomponentsᚋscalarᚐUri(ctx context.Context, sel ast.SelectionSet, v *scalar.Uri) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOUser2ᚖbeanᚋpkgᚋuserᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v *model4.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUserCreateInput2ᚖbeanᚋpkgᚋuserᚋmodelᚋdtoᚐUserCreateInput(ctx context.Context, v interface{}) (*dto5.UserCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserCreateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUserEmail2ᚕᚖbeanᚋpkgᚋuserᚋmodelᚐUserEmail(ctx context.Context, sel ast.SelectionSet, v []*model4.UserEmail) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUserEmail2ᚖbeanᚋpkgᚋuserᚋmodelᚐUserEmail(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOUserEmail2ᚖbeanᚋpkgᚋuserᚋmodelᚐUserEmail(ctx context.Context, sel ast.SelectionSet, v *model4.UserEmail) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserEmail(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUserEmailInput2ᚕᚖbeanᚋpkgᚋuserᚋmodelᚋdtoᚐUserEmailInput(ctx context.Context, v interface{}) ([]*dto5.UserEmailInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*dto5.UserEmailInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOUserEmailInput2ᚖbeanᚋpkgᚋuserᚋmodelᚋdtoᚐUserEmailInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOUserEmailInput2ᚖbeanᚋpkgᚋuserᚋmodelᚋdtoᚐUserEmailInput(ctx context.Context, v interface{}) (*dto5.UserEmailInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserEmailInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUserEmails2ᚖbeanᚋpkgᚋuserᚋmodelᚐUserEmails(ctx context.Context, sel ast.SelectionSet, v *model4.UserEmails) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserEmails(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUserEmailsInput2ᚖbeanᚋpkgᚋuserᚋmodelᚋdtoᚐUserEmailsInput(ctx context.Context, v interface{}) (*dto5.UserEmailsInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserEmailsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserUpdateValuesInput2ᚖbeanᚋpkgᚋuserᚋmodelᚋdtoᚐUserUpdateValuesInput(ctx context.Context, v interface{}) (*dto5.UserUpdateValuesInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserUpdateValuesInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
