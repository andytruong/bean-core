# ---------------------
# User -> Create
# ---------------------
extend type Mutation {
	userCreate(input: UserCreateInput): UserMutationOutcome
}

input UserCreateInput {
	name: UserNameInput!
	emails: UserEmailsInput
	password: UserPasswordInput!
	avatarUri: Uri
	isActive: Boolean!
}

input UserNameInput {
	firstName: String
	lastName: String
	preferredName: String
}

input UserEmailsInput {
	primary: UserEmailInput!
	secondary: [UserEmailInput]
}

input UserEmailInput {
	verified: Boolean!
	value: EmailAddress!
	isActive: Boolean!
}

input UserPasswordInput {
	hashedValue: String!
	algorithm: String!
}

type UserMutationOutcome {
	user: User
	errors: [Error!]
}


# ---------------------
# User -> Update
# ---------------------
extend type Mutation {
	userUpdate(input: UserUpdateInput!): UserMutationOutcome
}

input UserUpdateInput {
	id: ID!
	versioN: ID!
	values: UserUpdateValuesInput
}

input UserUpdateValuesInput {
	password: UserPasswordInput!
}
