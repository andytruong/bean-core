type Membership {
	id: ID!
	version: ID!
	namespace: Namespace!
	user: User!
	isActive: Boolean!
	createdAt: Time!
	updatedAt: Time!
	roles: [Namespace!]!
}

# ---------------------
# Membership -> Create
# ---------------------
extend type Mutation {
	namespaceMembershipCreate(input: NamespaceMembershipCreateInput!): NamespaceMembershipCreateOutcome!
}

input NamespaceMembershipCreateInput {
	namespaceId: ID!
	userId: ID!
	isActive: Boolean!
	managerMemberIds: [ID!]!
}

type NamespaceMembershipCreateOutcome {
	errors: [Error!]
	membership: Membership
}

# ---------------------
# Membership -> Update
# ---------------------
extend type Mutation {
	namespaceMembershipUpdate(input: NamespaceMembershipUpdateInput!): NamespaceMembershipCreateOutcome!
}

input NamespaceMembershipUpdateInput {
	id: ID!
	version: ID!
	Language: Language
	isActive: Boolean!
}

# ---------------------
# Query Memberships
# ---------------------
extend type Query {
	membership(id: ID!, version: ID): Membership
	memberships(first: Int!, after: String, filters: MembershipsFilter!): MembershipConnection
}

input MembershipsFilter {
	namespace: MembershipsFilterNamespace
	userId: ID!
	isActive: Boolean!
	managerId: ID
}

input MembershipsFilterNamespace {
	title: String
	domainName: String
}

type MembershipConnection {
	edges: [MembershipEdge!]!
	nodes: [Membership!]!
	pageInfo: MembershipInfo!
}

type MembershipEdge {
	cursor: String!
	node: Membership!
}

type MembershipInfo {
	endCursor: String
	hasNextPage: Boolean!
	startCursor: String
}
