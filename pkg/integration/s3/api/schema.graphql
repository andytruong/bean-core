# =====================
# Entity
# =====================
extend type Application {
    polices: [Policy!]
    credentials: Credentials!
}

enum PolicyKind  {
    FileExtensions,
    RateLimit
}

type Policy {
    id: ID!
    createdAt: Time!
    updatedAt: Time!
    kind: PolicyKind!
    value: String!
}

type Credentials {
    id: ID!
    endpoint: Uri!
    bucket: String!
    isSecure: Boolean!
    accesskey: String! @comment(value: "no secret key")
}

# =====================
# Mutation
# =====================
extend type Mutation  {
    s3Mutation: S3Mutation!
}

type S3Mutation {
    upload: S3UploadMutation!

    # TODO: put credentials into application
    #     -> do we need it?
    #     -> Should do in application.configuration with predefined schema?
    # TODO: put policy into application
    #     -> do we need it?
    #     -> Should do in application.configuration with predefined schema?
}

input S3ApplicationCredentialsCreateInput {
    endpoint: Uri!
    bucket: String!
    isSecure: Boolean!
    accessKey: String!
    secretKey: String!
}

input S3ApplicationPolicyCreateInput {
    kind: PolicyKind!
    value: String!
}

# ---------------------
# Mutation -> Update
# ---------------------

input S3ApplicationUpdateInput {
    id: ID!
    version: ID!
    isActive: Boolean
    credentials: S3ApplicationCredentialsUpdateInput
    policies: S3ApplicationPolicyMutationInput
}

input S3ApplicationCredentialsUpdateInput {
    endpoint: Uri
    bucket: String
    isSecure: Boolean
    accessKey: String
    secretKey: String
}

input S3ApplicationPolicyMutationInput {
    create: [S3ApplicationPolicyCreateInput!]
    update: [S3ApplicationPolicyUpdateInput!]
    delete: [S3ApplicationPolicyDeleteInput!]
}

input S3ApplicationPolicyUpdateInput {
    id: ID!
    value: String!
}

input S3ApplicationPolicyDeleteInput {
    id: ID!
}

# ---------------------
# Mutation -> Upload
# ---------------------
type S3UploadMutation {
    token(input: S3UploadTokenInput!): Map! @requireAuth
}

input S3UploadTokenInput {
    applicationId: ID!
    filePath:      Uri! @constraint(minLength: 7, maxLength: 128)
    contentType:   ContentType!
}
