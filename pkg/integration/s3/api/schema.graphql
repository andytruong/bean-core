# =====================
# Entity
# =====================
extend type Application {
    s3Credentials: S3Credentials
    s3UploadPolicies: S3UploadPolicy
}

type S3Credentials {
    version: ID!
    endpoint: Uri!
    bucket: String!
    isSecure: Boolean!
    accesskey: String! @comment(value: "no secret key")
}

type S3UploadPolicy {
    version: ID!
    fileExtensions:[FileType!]!
    rateLimit: [UploadRateLimitPolicy]!
}

type UploadRateLimitPolicy {
    value: String!     # example: 1MB, 1GB
    object: String!    # example: user, space
    interval: String!  # example: minute, hour, day
}

# =====================
# Mutation
# =====================
extend type Mutation  {
    s3Mutation: S3Mutation!
}

type S3Mutation {
    saveCredentials(input: S3CredentialsInput): S3CredentialsOutcome!
    saveUploadPolicies(input: UploadPolicyInput): S3UploadPolicyOutcome!
    uploadToken(input: UploadTokenInput!): Map! @requireAuth
}

input S3CredentialsInput {
    version: ID!
    applicationId: ID!
    endpoint: Uri!
    bucket: String!
    isSecure: Boolean!
    accessKey: String!
    secretKey: String!
}

type S3CredentialsOutcome {
    errors: [Error!]
    credentials: S3Credentials
}

input UploadPolicyInput {
    version: ID!
    applicationId: ID!
    fileExtensions: [FileType!]
    rateLimit: [UploadRateLimitInput!]
}

input UploadRateLimitInput {
    value: String!
    object: String!
    interval: String!
}

type S3UploadPolicyOutcome {
    errors: [Error!]
    policy: S3UploadPolicy
}

input UploadTokenInput {
    applicationId: ID!
    filePath:      Uri! @constraint(minLength: 7, maxLength: 128)
    contentType:   ContentType!
}
